
package other_windows;

import java.awt.*;
import java.awt.event.*;
import java.sql.*;
import javax.swing.*;
import javax.swing.border.*;
import javax.swing.table.DefaultTableModel;

import database.conecctionSQL;
import main.MainPanelPlaceholder;
import main.main_window;

public class StockPanel extends JPanel {

    private static final long serialVersionUID = 1L;
    private JPanel contentPane;
    private JTable table_products;
    private DefaultTableModel model;
    private JTextField txt_Add_ID, txt_AddName, txt_AddQty, txt_AddPrice, txt_AddDesc, txt_ID_Delete, txt_Search;
    private main_window mainWindow;

    public StockPanel(main_window mainWindow) {
        this.mainWindow = mainWindow;

        setLayout(new BorderLayout());
        setBackground(new Color(245, 245, 255));

        contentPane = new JPanel(new BorderLayout(10, 10));
        contentPane.setBackground(new Color(245, 245, 255));
        contentPane.setBorder(new EmptyBorder(15, 15, 15, 15));
        add(contentPane, BorderLayout.CENTER);

        addHeader();
        addCenterPanel();
        loadStock();
    }

    private void addHeader() {
        JPanel headerPanel = new JPanel(new BorderLayout());
        headerPanel.setBackground(new Color(0, 128, 255));

        JLabel lblTitle = new JLabel("üì¶ Gesti√≥n de Stock", SwingConstants.CENTER);
        lblTitle.setFont(new Font("Segoe UI Emoji", Font.BOLD, 24));
        lblTitle.setForeground(Color.WHITE);

        JButton btnBack = new JButton("‚Üê Volver");
        btnBack.setFocusPainted(false);
        btnBack.setBackground(new Color(0, 91, 150));
        btnBack.setForeground(Color.WHITE);
        btnBack.setFont(new Font("Segoe UI", Font.BOLD, 14));
        btnBack.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        btnBack.addActionListener(e -> {
            mainWindow.setMainContent(new MainPanelPlaceholder());
        });

        headerPanel.add(lblTitle, BorderLayout.CENTER);
        headerPanel.add(btnBack, BorderLayout.WEST);
        contentPane.add(headerPanel, BorderLayout.NORTH);
    }

    private void addCenterPanel() {
        JPanel center = new JPanel(new BorderLayout(10, 10));
        center.setBackground(new Color(244, 246, 249));

        model = new DefaultTableModel(new String[]{"ID", "Nombre", "Cantidad", "Precio", "Descripci√≥n"}, 0);
        table_products = new JTable(model);
        table_products.getSelectionModel().addListSelectionListener(e -> {
            if (!e.getValueIsAdjusting() && table_products.getSelectedRow() != -1) {
                int fila = table_products.getSelectedRow();
                txt_Add_ID.setText(model.getValueAt(fila, 0).toString());
                txt_AddName.setText(model.getValueAt(fila, 1).toString());
                txt_AddQty.setText(model.getValueAt(fila, 2).toString());
                txt_AddPrice.setText(model.getValueAt(fila, 3).toString());
                txt_AddDesc.setText(model.getValueAt(fila, 4).toString());
            }
        });
        JScrollPane scrollPane = new JScrollPane(table_products);
        center.add(scrollPane, BorderLayout.CENTER);

        JPanel fieldsPanel = new JPanel(new GridBagLayout());
        fieldsPanel.setBackground(new Color(244, 246, 249));
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(5, 10, 5, 10);
        gbc.fill = GridBagConstraints.HORIZONTAL;

        String[] labels = {"ID:", "Nombre:", "Cantidad:", "Precio:", "Descripci√≥n:"};
        JTextField[] fields = {
            txt_Add_ID = new JTextField(),
            txt_AddName = new JTextField(),
            txt_AddQty = new JTextField(),
            txt_AddPrice = new JTextField(),
            txt_AddDesc = new JTextField()
        };

        for (int i = 0; i < labels.length; i++) {
            gbc.gridx = 0;
            gbc.gridy = i;
            gbc.weightx = 0.2;
            JLabel lbl = new JLabel(labels[i]);
            lbl.setFont(new Font("Segoe UI", Font.BOLD, 14));
            fieldsPanel.add(lbl, gbc);

            gbc.gridx = 1;
            gbc.weightx = 0.8;
            fields[i].setFont(new Font("Segoe UI", Font.PLAIN, 14));
            fields[i].setPreferredSize(new Dimension(200, 30));
            fieldsPanel.add(fields[i], gbc);
        }

        gbc.gridx = 0;
        gbc.gridy = labels.length;
        gbc.gridwidth = 2;
        gbc.anchor = GridBagConstraints.CENTER;

        JButton btnAdd = new JButton("‚ûï A√±adir Producto");
        btnAdd.setFont(new Font("Segoe UI Emoji", Font.BOLD, 14));
        btnAdd.setBackground(new Color(0, 128, 255));
        btnAdd.setForeground(Color.WHITE);
        btnAdd.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        btnAdd.setFocusPainted(false);
        btnAdd.setPreferredSize(new Dimension(180, 35));
        btnAdd.addActionListener(e -> addProduct());
        fieldsPanel.add(btnAdd, gbc);

        JButton btnDelete = new JButton("üóë Eliminar");
        btnDelete.setFont(new Font("Segoe UI Emoji", Font.BOLD, 14));
        btnDelete.setBackground(new Color(200, 0, 0));
        btnDelete.setForeground(Color.WHITE);
        btnDelete.setFocusPainted(false);
        btnDelete.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        btnDelete.setPreferredSize(new Dimension(150, 35));
        btnDelete.addActionListener(e -> deleteProduct());

        gbc.gridy++;
        fieldsPanel.add(btnDelete, gbc);
        
        JButton btnClear = new JButton("üßπ Limpiar campos");
        btnClear.setFont(new Font("Segoe UI Emoji", Font.BOLD, 14));
        btnClear.setBackground(new Color(120, 120, 120));
        btnClear.setForeground(Color.WHITE);
        btnClear.setFocusPainted(false);
        btnClear.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        btnClear.setPreferredSize(new Dimension(150, 35));
        btnClear.addActionListener(e -> clearFields());
        
        gbc.gridy++;
        fieldsPanel.add(btnClear, gbc);


        JLabel lblBuscar = new JLabel("Buscar por nombre:");
        lblBuscar.setFont(new Font("Segoe UI Emoji", Font.BOLD, 14));
        gbc.gridy++;
        fieldsPanel.add(lblBuscar, gbc);

        txt_Search = new JTextField();
        txt_Search.setFont(new Font("Segoe UI", Font.PLAIN, 14));
        txt_Search.setPreferredSize(new Dimension(100, 30));
        gbc.gridy++;
        fieldsPanel.add(txt_Search, gbc);

        JButton btnBuscar = new JButton("üîç Buscar");
        btnBuscar.setFont(new Font("Segoe UI Emoji", Font.BOLD, 14));
        btnBuscar.setBackground(new Color(0, 91, 150));
        btnBuscar.setForeground(Color.WHITE);
        btnBuscar.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        btnBuscar.setFocusPainted(false);
        btnBuscar.setPreferredSize(new Dimension(150, 35));
        btnBuscar.addActionListener(e -> buscarProducto());
        gbc.gridy++;
        fieldsPanel.add(btnBuscar, gbc);

        JButton btnModificar = new JButton("‚úè Modificar");
        btnModificar.setFont(new Font("Segoe UI Emoji", Font.BOLD, 14));
        btnModificar.setBackground(new Color(0, 128, 0));
        btnModificar.setForeground(Color.WHITE);
        btnModificar.setFocusPainted(false);
        btnModificar.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        btnModificar.setPreferredSize(new Dimension(150, 35));
        btnModificar.addActionListener(e -> modificarProducto());
        gbc.gridy++;
        fieldsPanel.add(btnModificar, gbc);

        center.add(fieldsPanel, BorderLayout.EAST);
        contentPane.add(center, BorderLayout.CENTER);
    }

    private void loadStock() {
        model.setRowCount(0);
        try (Connection conn = conecctionSQL.getConnection();
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery("SELECT * FROM productos")) {

            while (rs.next()) {
                model.addRow(new Object[]{
                    rs.getInt("id"),
                    rs.getString("nombre"),
                    rs.getInt("cantidad"),
                    rs.getDouble("precio"),
                    rs.getString("descripcion")
                });
            }

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error al cargar el stock", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void addProduct() {
        try (Connection conn = conecctionSQL.getConnection();
             PreparedStatement ps = conn.prepareStatement("INSERT INTO productos (id, nombre, cantidad, precio, descripcion) VALUES (?, ?, ?, ?, ?)")) {

            ps.setInt(1, Integer.parseInt(txt_Add_ID.getText().trim()));
            ps.setString(2, txt_AddName.getText().trim());
            ps.setInt(3, Integer.parseInt(txt_AddQty.getText().trim()));
            ps.setDouble(4, Double.parseDouble(txt_AddPrice.getText().trim()));
            ps.setString(5, txt_AddDesc.getText().trim());

            ps.executeUpdate();
            JOptionPane.showMessageDialog(this, "Producto agregado exitosamente");
            loadStock();
            clearFields();

        } catch (SQLException | NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Error al agregar producto", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void deleteProduct() {
        try (Connection conn = conecctionSQL.getConnection();
             PreparedStatement ps = conn.prepareStatement("DELETE FROM productos WHERE id = ?")) {

            ps.setInt(1, Integer.parseInt(txt_Add_ID.getText().trim()));
            int rows = ps.executeUpdate();

            if (rows > 0) {
                JOptionPane.showMessageDialog(this, "Producto eliminado exitosamente");
                loadStock();
            } else {
                JOptionPane.showMessageDialog(this, "No se pudo eliminar el producto", "Error", JOptionPane.WARNING_MESSAGE);
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al eliminar", "Error", JOptionPane.ERROR_MESSAGE);
        }
        clearFields();
    }

    private void buscarProducto() {
        String filtro = txt_Search.getText().trim();
        model.setRowCount(0);

        String sql = "SELECT * FROM productos WHERE nombre LIKE ?";
        try (Connection conn = conecctionSQL.getConnection();
             PreparedStatement ps = conn.prepareStatement(sql)) {

            ps.setString(1, "%" + filtro + "%");
            ResultSet rs = ps.executeQuery();

            while (rs.next()) {
                model.addRow(new Object[]{
                    rs.getInt("id"),
                    rs.getString("nombre"),
                    rs.getInt("cantidad"),
                    rs.getDouble("precio"),
                    rs.getString("descripcion")
                });
            }

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error al buscar producto", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void modificarProducto() {
        try (Connection conn = conecctionSQL.getConnection();
             PreparedStatement ps = conn.prepareStatement("UPDATE productos SET nombre=?, cantidad=?, precio=?, descripcion=? WHERE id=?")) {

            ps.setString(1, txt_AddName.getText().trim());
            ps.setInt(2, Integer.parseInt(txt_AddQty.getText().trim()));
            ps.setDouble(3, Double.parseDouble(txt_AddPrice.getText().trim()));
            ps.setString(4, txt_AddDesc.getText().trim());
            ps.setInt(5, Integer.parseInt(txt_Add_ID.getText().trim()));

            int filas = ps.executeUpdate();
            if (filas > 0) {
                JOptionPane.showMessageDialog(this, "Producto modificado correctamente.");
                loadStock();
                clearFields();
            } else {
                JOptionPane.showMessageDialog(this, "No se encontr√≥ el producto con ese ID.", "Atenci√≥n", JOptionPane.WARNING_MESSAGE);
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al modificar", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void clearFields() {
        txt_Add_ID.setText("");
        txt_AddName.setText("");
        txt_AddQty.setText("");
        txt_AddPrice.setText("");
        txt_AddDesc.setText("");
        txt_ID_Delete.setText("");
        txt_Search.setText("");
    }
}
