
package other_windows;

import java.awt.*;
import java.awt.event.*;
import java.sql.*;
import javax.swing.*;
import javax.swing.border.*;
import javax.swing.table.DefaultTableModel;

import database.conecctionSQL;
import main.MainPanelPlaceholder;
import main.main_window;

public class SalesPanel extends JPanel {

    private static final long serialVersionUID = 1L;
    private JPanel contentPane;
    private JTable table_sales;
    private DefaultTableModel model;
    private JTextField txt_ID_Delete, txt_Add_ID, txt_AddProduct, txt_AddAmount, txt_AddPriceUnit, txt_AddDateSale, txt_Search;
    private main_window mainWindow;

    public SalesPanel(main_window mainWindow) {
        this.mainWindow = mainWindow;

        setLayout(new BorderLayout());
        setBackground(new Color(245, 245, 255));

        contentPane = new JPanel(new BorderLayout(10, 10));
        contentPane.setBackground(new Color(245, 245, 255));
        contentPane.setBorder(new EmptyBorder(15, 15, 15, 15));
        add(contentPane, BorderLayout.CENTER);

        addHeader();
        addCenterPanel();
        loadSales();
    }

    private void addHeader() {
        JPanel headerPanel = new JPanel(new BorderLayout());
        headerPanel.setBackground(new Color(0, 128, 255));

        JLabel lblTitle = new JLabel("üìà Gesti√≥n de Ventas", SwingConstants.CENTER);
        lblTitle.setFont(new Font("Segoe UI Emoji", Font.BOLD, 24));
        lblTitle.setForeground(Color.WHITE);

        JButton btnBack = new JButton("‚Üê Volver");
        btnBack.setFocusPainted(false);
        btnBack.setBackground(new Color(0, 91, 150));
        btnBack.setForeground(Color.WHITE);
        btnBack.setFont(new Font("Segoe UI", Font.BOLD, 14));
        btnBack.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        btnBack.addActionListener(e -> mainWindow.setMainContent(new MainPanelPlaceholder()));

        headerPanel.add(lblTitle, BorderLayout.CENTER);
        headerPanel.add(btnBack, BorderLayout.WEST);
        contentPane.add(headerPanel, BorderLayout.NORTH);
    }

    private void addCenterPanel() {
        JPanel center = new JPanel(new BorderLayout(10, 10));
        center.setBackground(new Color(244, 246, 249));

        model = new DefaultTableModel(new String[]{"ID", "Producto", "Cantidad", "P/U (‚Ç¨)", "Total (‚Ç¨)", "Fecha"}, 0);
        table_sales = new JTable(model);
        table_sales.getSelectionModel().addListSelectionListener(e -> {
            if (!e.getValueIsAdjusting() && table_sales.getSelectedRow() != -1) {
                int fila = table_sales.getSelectedRow();
                txt_Add_ID.setText(model.getValueAt(fila, 0).toString());
                txt_AddProduct.setText(model.getValueAt(fila, 1).toString());
                txt_AddAmount.setText(model.getValueAt(fila, 2).toString());
                txt_AddPriceUnit.setText(model.getValueAt(fila, 3).toString());
                txt_AddDateSale.setText(model.getValueAt(fila, 5).toString());
            }
        });
        JScrollPane scrollPane = new JScrollPane(table_sales);
        center.add(scrollPane, BorderLayout.CENTER);

        JPanel fieldsPanel = new JPanel(new GridBagLayout());
        fieldsPanel.setBackground(new Color(244, 246, 249));
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(5, 10, 5, 10);
        gbc.fill = GridBagConstraints.HORIZONTAL;

        String[] labels = {"ID:", "Producto:", "Cantidad:", "Precio/U:", "Fecha:"};
        JTextField[] fields = {
            txt_Add_ID = new JTextField(),
            txt_AddProduct = new JTextField(),
            txt_AddAmount = new JTextField(),
            txt_AddPriceUnit = new JTextField(),
            txt_AddDateSale = new JTextField()
        };

        for (int i = 0; i < labels.length; i++) {
            gbc.gridx = 0;
            gbc.gridy = i;
            gbc.weightx = 0.2;
            JLabel lbl = new JLabel(labels[i]);
            lbl.setFont(new Font("Segoe UI", Font.BOLD, 14));
            fieldsPanel.add(lbl, gbc);

            gbc.gridx = 1;
            gbc.weightx = 0.8;
            fields[i].setFont(new Font("Segoe UI", Font.PLAIN, 14));
            fields[i].setPreferredSize(new Dimension(200, 30));
            fieldsPanel.add(fields[i], gbc);
        }

        gbc.gridx = 0;
        gbc.gridy = labels.length;
        gbc.gridwidth = 2;
        gbc.anchor = GridBagConstraints.CENTER;

        JButton btnAdd = new JButton("‚ûï A√±adir Venta");
        btnAdd.setFont(new Font("Segoe UI Emoji", Font.BOLD, 14));
        btnAdd.setBackground(new Color(0, 128, 255));
        btnAdd.setForeground(Color.WHITE);
        btnAdd.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        btnAdd.setFocusPainted(false);
        btnAdd.setPreferredSize(new Dimension(180, 35));
        btnAdd.addActionListener(e -> addSale());
        fieldsPanel.add(btnAdd, gbc);

        gbc.gridy++;
        JButton btnDelete = new JButton("üóë Eliminar");
        btnDelete.setFont(new Font("Segoe UI Emoji", Font.BOLD, 14));
        btnDelete.setBackground(new Color(200, 0, 0));
        btnDelete.setForeground(Color.WHITE);
        btnDelete.setFocusPainted(false);
        btnDelete.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        btnDelete.setPreferredSize(new Dimension(150, 35));
        btnDelete.addActionListener(e -> deleteSale());
        fieldsPanel.add(btnDelete, gbc);

        gbc.gridy++;
        JButton btnClear = new JButton("üßπ Limpiar campos");
        btnClear.setFont(new Font("Segoe UI Emoji", Font.BOLD, 14));
        btnClear.setBackground(new Color(120, 120, 120));
        btnClear.setForeground(Color.WHITE);
        btnClear.setFocusPainted(false);
        btnClear.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        btnClear.setPreferredSize(new Dimension(150, 35));
        btnClear.addActionListener(e -> clearFields());
        fieldsPanel.add(btnClear, gbc);

        gbc.gridy++;
        JLabel lblBuscar = new JLabel("Buscar por ID o producto:");
        lblBuscar.setFont(new Font("Segoe UI Emoji", Font.BOLD, 14));
        fieldsPanel.add(lblBuscar, gbc);

        gbc.gridy++;
        txt_Search = new JTextField();
        txt_Search.setFont(new Font("Segoe UI", Font.PLAIN, 14));
        txt_Search.setPreferredSize(new Dimension(100, 30));
        fieldsPanel.add(txt_Search, gbc);

        gbc.gridy++;
        JButton btnBuscar = new JButton("üîç Buscar");
        btnBuscar.setFont(new Font("Segoe UI Emoji", Font.BOLD, 14));
        btnBuscar.setBackground(new Color(0, 91, 150));
        btnBuscar.setForeground(Color.WHITE);
        btnBuscar.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        btnBuscar.setFocusPainted(false);
        btnBuscar.setPreferredSize(new Dimension(150, 35));
        btnBuscar.addActionListener(e -> buscarVenta());
        fieldsPanel.add(btnBuscar, gbc);

        gbc.gridy++;
        JButton btnModificar = new JButton("‚úè Modificar");
        btnModificar.setFont(new Font("Segoe UI Emoji", Font.BOLD, 14));
        btnModificar.setBackground(new Color(0, 128, 0));
        btnModificar.setForeground(Color.WHITE);
        btnModificar.setFocusPainted(false);
        btnModificar.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        btnModificar.setPreferredSize(new Dimension(150, 35));
        btnModificar.addActionListener(e -> modificarVenta());
        fieldsPanel.add(btnModificar, gbc);

        gbc.gridy++;
        JButton btnIrCompras = new JButton("üõí Ir a Compras");
        btnIrCompras.setFont(new Font("Segoe UI Emoji", Font.BOLD, 14));
        btnIrCompras.setBackground(new Color(0, 91, 150));
        btnIrCompras.setForeground(Color.WHITE);
        btnIrCompras.setFocusPainted(false);
        btnIrCompras.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        btnIrCompras.setPreferredSize(new Dimension(180, 35));
        btnIrCompras.addActionListener(e -> mainWindow.setMainContent(new PurchasesPanel(mainWindow)));
        fieldsPanel.add(btnIrCompras, gbc);

        center.add(fieldsPanel, BorderLayout.EAST);
        contentPane.add(center, BorderLayout.CENTER);
    }

    private void loadSales() {
        model.setRowCount(0);
        try (Connection conn = conecctionSQL.getConnection();
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery("SELECT * FROM ventas")) {
            while (rs.next()) {
                model.addRow(new Object[]{
                    rs.getInt("id_venta"),
                    rs.getString("producto"),
                    rs.getInt("cantidad"),
                    rs.getDouble("precio"),
                    rs.getDouble("total"),
                    rs.getString("fecha_venta")
                });
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private void addSale() {
        String idText = txt_Add_ID.getText().trim();
        String producto = txt_AddProduct.getText().trim();
        String cantidadText = txt_AddAmount.getText().trim();
        String precioText = txt_AddPriceUnit.getText().trim();
        String fecha = txt_AddDateSale.getText().trim();

        if (idText.isEmpty() || producto.isEmpty() || cantidadText.isEmpty() || precioText.isEmpty() || fecha.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor, rellena todos los campos.", "Campos incompletos", JOptionPane.WARNING_MESSAGE);
            return;
        }

        int id, cantidad;
        double precio;
        try {
            id = Integer.parseInt(idText);
            cantidad = Integer.parseInt(cantidadText);
            precio = Double.parseDouble(precioText);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Los campos ID, Cantidad y Precio deben ser num√©ricos v√°lidos.", "Error de formato", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (!fecha.matches("\\d{4}-\\d{2}-\\d{2}")) {
            JOptionPane.showMessageDialog(this, "La fecha debe tener el formato correcto: YYYY-MM-DD", "Formato de fecha inv√°lido", JOptionPane.WARNING_MESSAGE);
            return;
        }

        double total = cantidad * precio;

        try (Connection conn = conecctionSQL.getConnection();
             PreparedStatement ps = conn.prepareStatement("INSERT INTO ventas (id_venta, producto, cantidad, precio, total, fecha_venta) VALUES (?, ?, ?, ?, ?, ?)")) {

            ps.setInt(1, id);
            ps.setString(2, producto);
            ps.setInt(3, cantidad);
            ps.setDouble(4, precio);
            ps.setDouble(5, total);
            ps.setString(6, fecha);

            ps.executeUpdate();
            JOptionPane.showMessageDialog(this, "Venta agregada exitosamente");
            loadSales();
            clearFields();

        } catch (SQLIntegrityConstraintViolationException e) {
            JOptionPane.showMessageDialog(this, "El ID ya existe en la base de datos. Usa un ID √∫nico.", "ID duplicado", JOptionPane.ERROR_MESSAGE);
        } catch (SQLException e) {
        	JOptionPane.showMessageDialog(this, "Error al buscar: " + e.getMessage(), "Error SQL", JOptionPane.ERROR_MESSAGE);

        }
    }

    private void deleteSale() {
        int selectedRow = table_sales.getSelectedRow();
        if (selectedRow != -1) {
            int id = (int) model.getValueAt(selectedRow, 0);
            try (Connection conn = conecctionSQL.getConnection();
                 PreparedStatement ps = conn.prepareStatement("DELETE FROM ventas WHERE id_venta = ?")) {
                ps.setInt(1, id);
                ps.executeUpdate();
                loadSales();
                clearFields();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "Error al eliminar", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Selecciona una fila para eliminar", "Aviso", JOptionPane.WARNING_MESSAGE);
        }
    }

    private void buscarVenta() {
        String filtro = txt_Search.getText().trim();
        model.setRowCount(0);

        if (filtro.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Introduce un ID o nombre de producto para buscar.", "Campo de b√∫squeda vac√≠o", JOptionPane.WARNING_MESSAGE);
            loadSales();
            return;
        }

        String sql = "SELECT * FROM ventas WHERE producto LIKE ? OR id_venta LIKE ?";
        try (Connection conn = conecctionSQL.getConnection();
             PreparedStatement ps = conn.prepareStatement(sql)) {

            ps.setString(1, "%" + filtro + "%");
            ps.setString(2, "%" + filtro + "%");
            ResultSet rs = ps.executeQuery();

            boolean hayResultados = false;
            while (rs.next()) {
                hayResultados = true;
                model.addRow(new Object[]{
                    rs.getInt("id_venta"),
                    rs.getString("producto"),
                    rs.getInt("cantidad"),
                    rs.getDouble("precio"),
                    rs.getDouble("total"),
                    rs.getString("fecha_venta")
                });
            }

            if (!hayResultados) {
                JOptionPane.showMessageDialog(this, "No se encontraron resultados para: " + filtro, "Sin coincidencias", JOptionPane.INFORMATION_MESSAGE);
                loadSales();
            }

        } catch (SQLException e) {
        	JOptionPane.showMessageDialog(this, "Error al buscar: " + e.getMessage(), "Error SQL", JOptionPane.ERROR_MESSAGE);

            loadSales();
        }
    }

    private void modificarVenta() {
        String idText = txt_Add_ID.getText().trim();
        String producto = txt_AddProduct.getText().trim();
        String cantidadText = txt_AddAmount.getText().trim();
        String precioText = txt_AddPriceUnit.getText().trim();
        String fecha = txt_AddDateSale.getText().trim();

        if (idText.isEmpty() || producto.isEmpty() || cantidadText.isEmpty() || precioText.isEmpty() || fecha.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor, rellena todos los campos.", "Campos incompletos", JOptionPane.WARNING_MESSAGE);
            return;
        }

        int id, cantidad;
        double precio;
        try {
            id = Integer.parseInt(idText);
            cantidad = Integer.parseInt(cantidadText);
            precio = Double.parseDouble(precioText);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Los campos ID, Cantidad y Precio deben ser num√©ricos v√°lidos.", "Error de formato", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (!fecha.matches("\\d{4}-\\d{2}-\\d{2}")) {
            JOptionPane.showMessageDialog(this, "La fecha debe tener el formato correcto: YYYY-MM-DD", "Formato de fecha inv√°lido", JOptionPane.WARNING_MESSAGE);
            return;
        }

        double total = cantidad * precio;

        try (Connection conn = conecctionSQL.getConnection();
             PreparedStatement ps = conn.prepareStatement("UPDATE ventas SET producto=?, cantidad=?, precio=?, total=?, fecha_venta=? WHERE id_venta=?")) {

            ps.setString(1, producto);
            ps.setInt(2, cantidad);
            ps.setDouble(3, precio);
            ps.setDouble(4, total);
            ps.setString(5, fecha);
            ps.setInt(6, id);

            int filas = ps.executeUpdate();
            if (filas > 0) {
                JOptionPane.showMessageDialog(this, "Venta modificada correctamente.");
                loadSales();
                clearFields();
            } else {
                JOptionPane.showMessageDialog(this, "No se encontr√≥ la venta con ese ID.", "ID no encontrado", JOptionPane.WARNING_MESSAGE);
            }

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error al modificar:
" + e.getMessage(), "Error SQL", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void clearFields() {
        try { if (txt_Add_ID != null) txt_Add_ID.setText(""); } catch (Exception ignored) {}
        try { if (txt_AddProduct != null) txt_AddProduct.setText(""); } catch (Exception ignored) {}
        try { if (txt_AddAmount != null) txt_AddAmount.setText(""); } catch (Exception ignored) {}
        try { if (txt_AddPriceUnit != null) txt_AddPriceUnit.setText(""); } catch (Exception ignored) {}
        try { if (txt_AddDateSale != null) txt_AddDateSale.setText(""); } catch (Exception ignored) {}
        try { if (txt_ID_Delete != null) txt_ID_Delete.setText(""); } catch (Exception ignored) {}
        try { if (txt_Search != null) txt_Search.setText(""); } catch (Exception ignored) {}
    }
}
