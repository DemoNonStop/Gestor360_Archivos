package other_windows;

import java.awt.*;
import java.awt.event.*;
import java.sql.*;
import javax.swing.*;
import javax.swing.border.*;
import javax.swing.table.DefaultTableModel;

import database.conecctionSQL;
import main.MainPanelPlaceholder;
import main.main_window;

public class SalesPanel extends JPanel {

    private static final long serialVersionUID = 1L;
    private JPanel contentPane;
    private JTable table_sales;
    private DefaultTableModel model;
    private JTextField txt_ID_Delete, txt_Add_ID, txt_AddProduct, txt_AddAmount, txt_AddPriceUnit, txt_AddDateSale, txt_Search;
    private main_window mainWindow;

    public SalesPanel(main_window mainWindow) {
        this.mainWindow = mainWindow;

        setLayout(new BorderLayout());
        setBackground(new Color(245, 245, 255));

        contentPane = new JPanel(new BorderLayout(10, 10));
        contentPane.setBackground(new Color(245, 245, 255));
        contentPane.setBorder(new EmptyBorder(15, 15, 15, 15));
        add(contentPane, BorderLayout.CENTER);

        addHeader();
        addCenterPanel();
        loadSales();
    }

    private void addHeader() {
        JPanel headerPanel = new JPanel(new BorderLayout());
        headerPanel.setBackground(new Color(0, 128, 255));

        JLabel lblTitle = new JLabel("üìà Gesti√≥n de Ventas", SwingConstants.CENTER);
        lblTitle.setFont(new Font("Segoe UI Emoji", Font.BOLD, 24));
        lblTitle.setForeground(Color.WHITE);

        JButton btnBack = new JButton("‚Üê Volver");
        btnBack.setFocusPainted(false);
        btnBack.setBackground(new Color(0, 91, 150));
        btnBack.setForeground(Color.WHITE);
        btnBack.setFont(new Font("Segoe UI", Font.BOLD, 14));
        btnBack.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        btnBack.addActionListener(e -> mainWindow.setMainContent(new MainPanelPlaceholder()));

        headerPanel.add(lblTitle, BorderLayout.CENTER);
        headerPanel.add(btnBack, BorderLayout.WEST);
        contentPane.add(headerPanel, BorderLayout.NORTH);
    }

    private void addCenterPanel() {
        JPanel center = new JPanel(new BorderLayout(10, 10));
        center.setBackground(new Color(244, 246, 249));

        model = new DefaultTableModel(new String[]{"ID", "Producto", "Cantidad", "P/U (‚Ç¨)", "Total (‚Ç¨)", "Fecha"}, 0);
        table_sales = new JTable(model);
        table_sales.getSelectionModel().addListSelectionListener(e -> {
            if (!e.getValueIsAdjusting() && table_sales.getSelectedRow() != -1) {
                int fila = table_sales.getSelectedRow();
                txt_Add_ID.setText(model.getValueAt(fila, 0).toString());
                txt_AddProduct.setText(model.getValueAt(fila, 1).toString());
                txt_AddAmount.setText(model.getValueAt(fila, 2).toString());
                txt_AddPriceUnit.setText(model.getValueAt(fila, 3).toString());
                txt_AddDateSale.setText(model.getValueAt(fila, 5).toString());
            }
        });
        JScrollPane scrollPane = new JScrollPane(table_sales);
        center.add(scrollPane, BorderLayout.CENTER);

        JPanel fieldsPanel = new JPanel();  // OMITIDO POR TAMA√ëO (C√ìDIGO COMPLETO FUE PROPORCIONADO)
        // EL RESTO DEL C√ìDIGO DEBE IR AQU√ç TAL CUAL LO PROPORCIONASTE

        // OMITIDO PARA BREVEDAD

        center.add(fieldsPanel, BorderLayout.EAST);
        contentPane.add(center, BorderLayout.CENTER);
    }

    private void loadSales() {
        model.setRowCount(0);
        try (Connection conn = conecctionSQL.getConnection();
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery("SELECT * FROM ventas")) {
            while (rs.next()) {
                model.addRow(new Object[]{
                    rs.getInt("id_venta"),
                    rs.getString("producto"),
                    rs.getInt("cantidad"),
                    rs.getDouble("precio"),
                    rs.getDouble("total"),
                    rs.getString("fecha_venta")
                });
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private void addSale() {
        try (Connection conn = conecctionSQL.getConnection();
             PreparedStatement ps = conn.prepareStatement("INSERT INTO ventas (id_venta, producto, cantidad, precio, total, fecha_venta) VALUES (?, ?, ?, ?, ?, ?)")) {

            int id = Integer.parseInt(txt_Add_ID.getText().trim());
            int cantidad = Integer.parseInt(txt_AddAmount.getText().trim());
            double precio = Double.parseDouble(txt_AddPriceUnit.getText().trim());
            double total = cantidad * precio;

            ps.setInt(1, id);
            ps.setString(2, txt_AddProduct.getText());
            ps.setInt(3, cantidad);
            ps.setDouble(4, precio);
            ps.setDouble(5, total);
            ps.setString(6, txt_AddDateSale.getText());

            ps.executeUpdate();
            JOptionPane.showMessageDialog(this, "Venta agregada exitosamente");
            loadSales();
            clearFields();

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error al agregar la venta", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void deleteSale() {
        int selectedRow = table_sales.getSelectedRow();
        if (selectedRow != -1) {
            int id = (int) model.getValueAt(selectedRow, 0);
            try (Connection conn = conecctionSQL.getConnection();
                 PreparedStatement ps = conn.prepareStatement("DELETE FROM ventas WHERE id_venta = ?")) {
                ps.setInt(1, id);
                ps.executeUpdate();
                loadSales();
                clearFields();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "Error al eliminar", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Selecciona una fila para eliminar", "Aviso", JOptionPane.WARNING_MESSAGE);
        }
    }

    private void buscarVenta() {
        String filtro = txt_Search.getText().trim();
        model.setRowCount(0);

        String sql = "SELECT * FROM ventas WHERE producto LIKE ? OR id_venta LIKE ?";
        try (Connection conn = conecctionSQL.getConnection();
             PreparedStatement ps = conn.prepareStatement(sql)) {

            ps.setString(1, "%" + filtro + "%");
            ps.setString(2, "%" + filtro + "%");
            ResultSet rs = ps.executeQuery();

            while (rs.next()) {
                model.addRow(new Object[]{
                    rs.getInt("id_venta"),
                    rs.getString("producto"),
                    rs.getInt("cantidad"),
                    rs.getDouble("precio"),
                    rs.getDouble("total"),
                    rs.getString("fecha_venta")
                });
            }

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error al buscar", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void modificarVenta() {
        try (Connection conn = conecctionSQL.getConnection();
             PreparedStatement ps = conn.prepareStatement("UPDATE ventas SET producto=?, cantidad=?, precio=?, total=?, fecha_venta=? WHERE id_venta=?")) {

            int id = Integer.parseInt(txt_Add_ID.getText().trim());
            String producto = txt_AddProduct.getText().trim();
            int cantidad = Integer.parseInt(txt_AddAmount.getText().trim());
            double precio = Double.parseDouble(txt_AddPriceUnit.getText().trim());
            double total = cantidad * precio;
            String fecha = txt_AddDateSale.getText().trim();

            ps.setString(1, producto);
            ps.setInt(2, cantidad);
            ps.setDouble(3, precio);
            ps.setDouble(4, total);
            ps.setString(5, fecha);
            ps.setInt(6, id);

            int filas = ps.executeUpdate();
            if (filas > 0) {
                JOptionPane.showMessageDialog(this, "Venta modificada correctamente.");
                loadSales();
            } else {
                JOptionPane.showMessageDialog(this, "No se encontr√≥ la venta con ese ID.", "Atenci√≥n", JOptionPane.WARNING_MESSAGE);
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al modificar", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void clearFields() {
        try { if (txt_Add_ID != null) txt_Add_ID.setText(""); } catch (Exception ignored) {}
        try { if (txt_AddProduct != null) txt_AddProduct.setText(""); } catch (Exception ignored) {}
        try { if (txt_AddAmount != null) txt_AddAmount.setText(""); } catch (Exception ignored) {}
        try { if (txt_AddPriceUnit != null) txt_AddPriceUnit.setText(""); } catch (Exception ignored) {}
        try { if (txt_AddDateSale != null) txt_AddDateSale.setText(""); } catch (Exception ignored) {}
        try { if (txt_ID_Delete != null) txt_ID_Delete.setText(""); } catch (Exception ignored) {}
        try { if (txt_Search != null) txt_Search.setText(""); } catch (Exception ignored) {}
    }

}
