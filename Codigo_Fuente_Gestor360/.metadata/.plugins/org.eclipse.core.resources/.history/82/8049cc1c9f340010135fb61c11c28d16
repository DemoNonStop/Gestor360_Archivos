package other_windows;

import java.awt.*;
import java.awt.event.*;
import java.sql.*;
import javax.swing.*;
import javax.swing.border.*;
import javax.swing.table.DefaultTableModel;

import database.conecctionSQL;
import main.main_window;
import main.MainPanelPlaceholder;

public class ClientsPanel extends JPanel {

    private static final long serialVersionUID = 1L;
    private JPanel contentPane;
    private JTable table_clients;
    private DefaultTableModel model;
    private JTextField txt_Add_ID, txt_AddName, txt_AddEdad, txt_AddDNI, txt_AddGenero, txt_AddEmail, txt_AddTelefono, txt_Search;
    private main_window mainWindow;

    public ClientsPanel(main_window mainWindow) {
        this.mainWindow = mainWindow;

        setLayout(new BorderLayout());
        setBackground(new Color(245, 245, 255));

        contentPane = new JPanel(new BorderLayout(10, 10));
        contentPane.setBackground(new Color(245, 245, 255));
        contentPane.setBorder(new EmptyBorder(15, 15, 15, 15));
        add(contentPane, BorderLayout.CENTER);

        addHeader();
        addCenterPanel();
        loadClients();
    }

    private void addHeader() {
        JPanel headerPanel = new JPanel(new BorderLayout());
        headerPanel.setBackground(new Color(0, 128, 255));

        JLabel lblTitle = new JLabel("üë• Gesti√≥n de Clientes", SwingConstants.CENTER);
        lblTitle.setFont(new Font("Segoe UI Emoji", Font.BOLD, 24));
        lblTitle.setForeground(Color.WHITE);

        JButton btnBack = new JButton("‚Üê Volver");
        btnBack.setFocusPainted(false);
        btnBack.setBackground(new Color(0, 91, 150));
        btnBack.setForeground(Color.WHITE);
        btnBack.setFont(new Font("Segoe UI", Font.BOLD, 14));
        btnBack.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        btnBack.addActionListener(e -> mainWindow.setMainContent(new MainPanelPlaceholder()));

        headerPanel.add(lblTitle, BorderLayout.CENTER);
        headerPanel.add(btnBack, BorderLayout.WEST);
        contentPane.add(headerPanel, BorderLayout.NORTH);
    }

    private void addCenterPanel() {
        JPanel center = new JPanel(new BorderLayout(10, 10));
        center.setBackground(new Color(244, 246, 249));

        model = new DefaultTableModel(new String[]{"ID", "Nombre", "Edad", "DNI", "G√©nero", "Email", "Tel√©fono"}, 0);
        table_clients = new JTable(model);
        table_clients.getSelectionModel().addListSelectionListener(e -> {
            if (!e.getValueIsAdjusting() && table_clients.getSelectedRow() != -1) {
                int fila = table_clients.getSelectedRow();
                txt_Add_ID.setText(model.getValueAt(fila, 0).toString());
                txt_AddName.setText(model.getValueAt(fila, 1).toString());
                txt_AddEdad.setText(model.getValueAt(fila, 2).toString());
                txt_AddDNI.setText(model.getValueAt(fila, 3).toString());
                txt_AddGenero.setText(model.getValueAt(fila, 4).toString());
                txt_AddEmail.setText(model.getValueAt(fila, 5).toString());
                txt_AddTelefono.setText(model.getValueAt(fila, 6).toString());
            }
        });
        JScrollPane scrollPane = new JScrollPane(table_clients);
        center.add(scrollPane, BorderLayout.CENTER);

        JPanel fieldsPanel = new JPanel(new GridBagLayout());
        fieldsPanel.setBackground(new Color(244, 246, 249));
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(5, 10, 5, 10);
        gbc.fill = GridBagConstraints.HORIZONTAL;

        String[] labels = {"ID:", "Nombre:", "Edad:", "DNI:", "G√©nero:", "Email:", "Tel√©fono:"};
        JTextField[] fields = {
            txt_Add_ID = new JTextField(),
            txt_AddName = new JTextField(),
            txt_AddEdad = new JTextField(),
            txt_AddDNI = new JTextField(),
            txt_AddGenero = new JTextField(),
            txt_AddEmail = new JTextField(),
            txt_AddTelefono = new JTextField()
        };

        for (int i = 0; i < labels.length; i++) {
            gbc.gridx = 0;
            gbc.gridy = i;
            gbc.weightx = 0.2;
            JLabel lbl = new JLabel(labels[i]);
            lbl.setFont(new Font("Segoe UI", Font.BOLD, 14));
            fieldsPanel.add(lbl, gbc);

            gbc.gridx = 1;
            gbc.weightx = 0.8;
            fields[i].setFont(new Font("Segoe UI", Font.PLAIN, 14));
            fields[i].setPreferredSize(new Dimension(200, 30));
            fieldsPanel.add(fields[i], gbc);
        }

        gbc.gridx = 0;
        gbc.gridy = labels.length;
        gbc.gridwidth = 2;
        gbc.anchor = GridBagConstraints.CENTER;

        JButton btnAdd = new JButton("‚ûï A√±adir Cliente");
        btnAdd.setFont(new Font("Segoe UI Emoji", Font.BOLD, 14));
        btnAdd.setBackground(new Color(0, 128, 255));
        btnAdd.setForeground(Color.WHITE);
        btnAdd.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        btnAdd.setFocusPainted(false);
        btnAdd.setPreferredSize(new Dimension(180, 35));
        btnAdd.addActionListener(e -> addClient());
        btnAdd.addMouseListener(new MouseAdapter() {
            public void mouseEntered(MouseEvent e) {
                btnAdd.setBackground(new Color(0, 110, 220));
            }

            public void mouseExited(MouseEvent e) {
                btnAdd.setBackground(new Color(0, 128, 255));
            }
        });
        fieldsPanel.add(btnAdd, gbc);

        gbc.gridy++;
        JButton btnDelete = new JButton("üóë Eliminar");
        btnDelete.setFont(new Font("Segoe UI Emoji", Font.BOLD, 14));
        btnDelete.setBackground(new Color(200, 0, 0));
        btnDelete.setForeground(Color.WHITE);
        btnDelete.setFocusPainted(false);
        btnDelete.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        btnDelete.setPreferredSize(new Dimension(150, 35));
        btnDelete.addActionListener(e -> deleteClient());
        btnDelete.addMouseListener(new MouseAdapter() {
            public void mouseEntered(MouseEvent e) {
                btnDelete.setBackground(new Color(160, 0, 0));
            }

            public void mouseExited(MouseEvent e) {
                btnDelete.setBackground(new Color(200, 0, 0));
            }
        });
        fieldsPanel.add(btnDelete, gbc);

        gbc.gridy++;
        JButton btnClear = new JButton("üßπ Limpiar campos");
        btnClear.setFont(new Font("Segoe UI Emoji", Font.BOLD, 14));
        btnClear.setBackground(new Color(120, 120, 120));
        btnClear.setForeground(Color.WHITE);
        btnClear.setFocusPainted(false);
        btnClear.setBorderPainted(false);  
        btnClear.setContentAreaFilled(true);  
        btnClear.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        btnClear.setPreferredSize(new Dimension(150, 35));
        btnClear.addActionListener(e -> clearFields());
        btnClear.addMouseListener(new MouseAdapter() {
            public void mouseEntered(MouseEvent e) {
                btnClear.setBackground(new Color(90, 90, 90));
            }

            public void mouseExited(MouseEvent e) {
                btnClear.setBackground(new Color(120, 120, 120));
            }
        });
        fieldsPanel.add(btnClear, gbc);

        gbc.gridy++;
        JLabel lblBuscar = new JLabel("Buscar por ID o nombre:");
        lblBuscar.setFont(new Font("Segoe UI Emoji", Font.BOLD, 14));
        fieldsPanel.add(lblBuscar, gbc);
        
        gbc.gridy++;
        txt_Search = new JTextField();
        txt_Search.setFont(new Font("Segoe UI", Font.PLAIN, 14));
        txt_Search.setPreferredSize(new Dimension(100, 30));
        fieldsPanel.add(txt_Search, gbc);

        gbc.gridy++;
        JButton btnBuscar = new JButton("üîç Buscar");
        btnBuscar.setFont(new Font("Segoe UI Emoji", Font.BOLD, 14));
        btnBuscar.setBackground(new Color(0, 91, 150));
        btnBuscar.setForeground(Color.WHITE);
        btnBuscar.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        btnBuscar.setFocusPainted(false);
        btnBuscar.setBorderPainted(false);  
        btnBuscar.setContentAreaFilled(true);
        btnBuscar.setPreferredSize(new Dimension(150, 35));
        btnBuscar.addActionListener(e -> buscarCliente());
        btnBuscar.addMouseListener(new MouseAdapter() {
            public void mouseEntered(MouseEvent e) {
                btnBuscar.setBackground(new Color(0, 70, 120));
            }

            public void mouseExited(MouseEvent e) {
                btnBuscar.setBackground(new Color(0, 91, 150));
            }
        });
        fieldsPanel.add(btnBuscar, gbc);

        gbc.gridy++;
        JButton btnModificar = new JButton("‚úè Modificar");
        btnModificar.setFont(new Font("Segoe UI Emoji", Font.BOLD, 14));
        btnModificar.setBackground(new Color(0, 128, 0));
        btnModificar.setForeground(Color.WHITE);
        btnModificar.setFocusPainted(false);
        btnModificar.setBorderPainted(false);  
        btnModificar.setContentAreaFilled(true);
        btnModificar.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        btnModificar.setPreferredSize(new Dimension(150, 35));
        btnModificar.addActionListener(e -> modificarCliente());
        btnModificar.addMouseListener(new MouseAdapter() {
            public void mouseEntered(MouseEvent e) {
                btnModificar.setBackground(new Color(0, 100, 0));
            }

            public void mouseExited(MouseEvent e) {
                btnModificar.setBackground(new Color(0, 128, 0));
            }
        });
        fieldsPanel.add(btnModificar, gbc);

        gbc.gridy++;
        JButton btnIrProveedores = new JButton("üè¢ Ir a Proveedores");
        btnIrProveedores.setFont(new Font("Segoe UI Emoji", Font.BOLD, 14));
        btnIrProveedores.setBackground(new Color(0, 128, 255));
        btnIrProveedores.setForeground(Color.WHITE);
        btnIrProveedores.setFocusPainted(false);
        btnIrProveedores.setBorderPainted(false);  
        btnClear.setContentAreaFilled(true);
        btnIrProveedores.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        btnIrProveedores.setPreferredSize(new Dimension(180, 35));
        btnIrProveedores.addActionListener(e -> mainWindow.setMainContent(new ProvidersPanel(mainWindow)));
        btnIrProveedores.addMouseListener(new MouseAdapter() {
            public void mouseEntered(MouseEvent e) {
                btnIrProveedores.setBackground(new Color(0, 110, 220));
            }

            public void mouseExited(MouseEvent e) {
                btnIrProveedores.setBackground(new Color(0, 128, 255));
            }
        });
        fieldsPanel.add(btnIrProveedores, gbc);

        center.add(fieldsPanel, BorderLayout.EAST);
        contentPane.add(center, BorderLayout.CENTER);
    }

    private void loadClients() {
        model.setRowCount(0);
        try (Connection conn = conecctionSQL.getConnection();
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery("SELECT * FROM clientes")) {
            while (rs.next()) {
                model.addRow(new Object[]{
                    rs.getInt("id"),
                    rs.getString("nombre"),
                    rs.getInt("edad"),
                    rs.getString("dni"),
                    rs.getString("genero"),
                    rs.getString("email"),
                    rs.getString("telefono")
                });
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error al cargar clientes: " + e.getMessage(), "Error SQL", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void addClient() {
        String idText = txt_Add_ID.getText().trim();
        String nombre = txt_AddName.getText().trim();
        String edadText = txt_AddEdad.getText().trim();
        String dni = txt_AddDNI.getText().trim();
        String genero = txt_AddGenero.getText().trim();
        String email = txt_AddEmail.getText().trim();
        String telefono = txt_AddTelefono.getText().trim();

        if (idText.isEmpty() || nombre.isEmpty() || edadText.isEmpty() || dni.isEmpty() || genero.isEmpty() || email.isEmpty() || telefono.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor, rellena todos los campos.", "Campos incompletos", JOptionPane.WARNING_MESSAGE);
            return;
        }

        try {
            int id = Integer.parseInt(idText);
            int edad = Integer.parseInt(edadText);

            try (Connection conn = conecctionSQL.getConnection();
                 PreparedStatement ps = conn.prepareStatement("INSERT INTO clientes (id, nombre, edad, dni, genero, email, telefono) VALUES (?, ?, ?, ?, ?, ?, ?)")) {

                ps.setInt(1, id);
                ps.setString(2, nombre);
                ps.setInt(3, edad);
                ps.setString(4, dni);
                ps.setString(5, genero);
                ps.setString(6, email);
                ps.setString(7, telefono);

                ps.executeUpdate();
                JOptionPane.showMessageDialog(this, "Cliente agregado exitosamente");
                loadClients();
                clearFields();

            } catch (SQLIntegrityConstraintViolationException ex) {
                JOptionPane.showMessageDialog(this, "El ID ya existe. Usa un ID √∫nico.", "ID duplicado", JOptionPane.ERROR_MESSAGE);
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "Error al agregar cliente:\n" + ex.getMessage(), "Error SQL", JOptionPane.ERROR_MESSAGE);
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Los campos ID y Edad deben ser num√©ricos v√°lidos.", "Error de formato", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void deleteClient() {
        int selectedRow = table_clients.getSelectedRow();
        if (selectedRow != -1) {
            int confirm = JOptionPane.showConfirmDialog(this, "¬øDeseas eliminar el cliente seleccionado?", "Confirmar eliminaci√≥n", JOptionPane.YES_NO_OPTION);
            if (confirm == JOptionPane.YES_OPTION) {
                int id = (int) model.getValueAt(selectedRow, 0);
                try (Connection conn = conecctionSQL.getConnection();
                     PreparedStatement ps = conn.prepareStatement("DELETE FROM clientes WHERE id = ?")) {
                    ps.setInt(1, id);
                    ps.executeUpdate();
                    loadClients();
                    clearFields();
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this, "Error al eliminar cliente:\n" + ex.getMessage(), "Error SQL", JOptionPane.ERROR_MESSAGE);
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Selecciona una fila para eliminar", "Sin selecci√≥n", JOptionPane.WARNING_MESSAGE);
        }
    }

    private void buscarCliente() {
        String filtro = txt_Search.getText().trim();
        model.setRowCount(0);

        if (filtro.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Introduce un ID o nombre para buscar.", "Campo vac√≠o", JOptionPane.WARNING_MESSAGE);
            loadClients();
            return;
        }

        String sql = "SELECT * FROM clientes WHERE nombre LIKE ? OR id LIKE ?";
        try (Connection conn = conecctionSQL.getConnection();
             PreparedStatement ps = conn.prepareStatement(sql)) {

            ps.setString(1, "%" + filtro + "%");
            ps.setString(2, "%" + filtro + "%");
            ResultSet rs = ps.executeQuery();

            boolean hayResultados = false;

            while (rs.next()) {
                hayResultados = true;
                model.addRow(new Object[]{
                    rs.getInt("id"),
                    rs.getString("nombre"),
                    rs.getInt("edad"),
                    rs.getString("dni"),
                    rs.getString("genero"),
                    rs.getString("email"),
                    rs.getString("telefono")
                });
            }

            if (!hayResultados) {
                JOptionPane.showMessageDialog(this, "No se encontraron clientes con ese criterio.", "Sin resultados", JOptionPane.INFORMATION_MESSAGE);
                loadClients();
            }

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error al buscar cliente:\n" + e.getMessage(), "Error SQL", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void modificarCliente() {
        String idText = txt_Add_ID.getText().trim();
        String nombre = txt_AddName.getText().trim();
        String edadText = txt_AddEdad.getText().trim();
        String dni = txt_AddDNI.getText().trim();
        String genero = txt_AddGenero.getText().trim();
        String email = txt_AddEmail.getText().trim();
        String telefono = txt_AddTelefono.getText().trim();

        if (idText.isEmpty() || nombre.isEmpty() || edadText.isEmpty() || dni.isEmpty() || genero.isEmpty() || email.isEmpty() || telefono.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor, rellena todos los campos.", "Campos incompletos", JOptionPane.WARNING_MESSAGE);
            return;
        }

        try {
            int id = Integer.parseInt(idText);
            int edad = Integer.parseInt(edadText);

            try (Connection conn = conecctionSQL.getConnection();
                 PreparedStatement ps = conn.prepareStatement("UPDATE clientes SET nombre=?, edad=?, dni=?, genero=?, email=?, telefono=? WHERE id=?")) {

                ps.setString(1, nombre);
                ps.setInt(2, edad);
                ps.setString(3, dni);
                ps.setString(4, genero);
                ps.setString(5, email);
                ps.setString(6, telefono);
                ps.setInt(7, id);

                int filas = ps.executeUpdate();
                if (filas > 0) {
                    JOptionPane.showMessageDialog(this, "Cliente modificado correctamente.");
                    loadClients();
                    clearFields();
                } else {
                    JOptionPane.showMessageDialog(this, "No se encontr√≥ ning√∫n cliente con ese ID.", "ID no encontrado", JOptionPane.WARNING_MESSAGE);
                }

            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "Error al modificar cliente:\n" + e.getMessage(), "Error SQL", JOptionPane.ERROR_MESSAGE);
            }

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Los campos ID y Edad deben ser num√©ricos v√°lidos.", "Error de formato", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void clearFields() {
        try { if (txt_Add_ID != null) txt_Add_ID.setText(""); } catch (Exception ignored) {}
        try { if (txt_AddName != null) txt_AddName.setText(""); } catch (Exception ignored) {}
        try { if (txt_AddEdad != null) txt_AddEdad.setText(""); } catch (Exception ignored) {}
        try { if (txt_AddDNI != null) txt_AddDNI.setText(""); } catch (Exception ignored) {}
        try { if (txt_AddGenero != null) txt_AddGenero.setText(""); } catch (Exception ignored) {}
        try { if (txt_AddEmail != null) txt_AddEmail.setText(""); } catch (Exception ignored) {}
        try { if (txt_AddTelefono != null) txt_AddTelefono.setText(""); } catch (Exception ignored) {}
        try { if (txt_Search != null) txt_Search.setText(""); } catch (Exception ignored) {}
    }
}
