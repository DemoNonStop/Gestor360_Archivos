package other_windows;

import javax.swing.*;
import javax.swing.border.EmptyBorder;
import javax.swing.table.DefaultTableModel;

import main.login_window;
import main.main_window;
import database.conecctionSQL;

import java.awt.*;
import java.awt.event.*;
import java.sql.*;

public class RRHHPanel extends JPanel {

    private static final long serialVersionUID = 1L;
    private JTextField txtUsuario, txtFechaInicio, txtFechaFin;
    private JTextArea txtMotivo;
    private JTable tablaVacaciones;
    private DefaultTableModel model;

    public RRHHPanel(main_window mainWindow) {
        setLayout(new BorderLayout());
        setBackground(new Color(245, 245, 255));

        JPanel mainPanel = new JPanel(new BorderLayout(10, 10));
        mainPanel.setBorder(new EmptyBorder(15, 15, 15, 15));
        mainPanel.setBackground(new Color(245, 245, 255));

        add(mainPanel, BorderLayout.CENTER);

        // Panel izquierdo: formulario
        JPanel formPanel = new JPanel(new GridBagLayout());
        formPanel.setBackground(new Color(244, 246, 249));
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(8, 8, 8, 8);
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.gridx = 0;

        JLabel lblUsuario = new JLabel("Usuario:");
        lblUsuario.setFont(new Font("Segoe UI", Font.BOLD, 14));
        gbc.gridy = 0;
        formPanel.add(lblUsuario, gbc);

        txtUsuario = new JTextField();
        txtUsuario.setFont(new Font("Segoe UI", Font.PLAIN, 14));
        txtUsuario.setText(login_window.getCurrentUser()); // Se autorellena autom√°ticamente

        gbc.gridy = 1;
        formPanel.add(txtUsuario, gbc);

        JLabel lblFechaInicio = new JLabel("Fecha inicio (YYYY-MM-DD):");
        lblFechaInicio.setFont(new Font("Segoe UI", Font.BOLD, 14));
        gbc.gridy = 2;
        formPanel.add(lblFechaInicio, gbc);

        txtFechaInicio = new JTextField();
        txtFechaInicio.setFont(new Font("Segoe UI", Font.PLAIN, 14));
        gbc.gridy = 3;
        formPanel.add(txtFechaInicio, gbc);

        JLabel lblFechaFin = new JLabel("Fecha fin (YYYY-MM-DD):");
        lblFechaFin.setFont(new Font("Segoe UI", Font.BOLD, 14));
        gbc.gridy = 4;
        formPanel.add(lblFechaFin, gbc);

        txtFechaFin = new JTextField();
        txtFechaFin.setFont(new Font("Segoe UI", Font.PLAIN, 14));
        gbc.gridy = 5;
        formPanel.add(txtFechaFin, gbc);

        JLabel lblMotivo = new JLabel("Motivo:");
        lblMotivo.setFont(new Font("Segoe UI", Font.BOLD, 14));
        gbc.gridy = 6;
        formPanel.add(lblMotivo, gbc);

        txtMotivo = new JTextArea(4, 20);
        txtMotivo.setLineWrap(true);
        txtMotivo.setWrapStyleWord(true);
        txtMotivo.setFont(new Font("Segoe UI", Font.PLAIN, 14));
        JScrollPane scrollMotivo = new JScrollPane(txtMotivo);
        gbc.gridy = 7;
        formPanel.add(scrollMotivo, gbc);

        // Botones
        JPanel buttonsPanel = new JPanel();
        buttonsPanel.setBackground(new Color(244, 246, 249));

        JButton btnEnviar = new JButton("üì§ Enviar");
        btnEnviar.setFont(new Font("Segoe UI Emoji", Font.BOLD, 14));
        btnEnviar.setBackground(new Color(0, 128, 255));
        btnEnviar.setForeground(Color.WHITE);
        btnEnviar.setFocusPainted(false);
        btnEnviar.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        btnEnviar.setPreferredSize(new Dimension(140, 35));
        btnEnviar.addActionListener(e -> enviarVacaciones());

        JButton btnLimpiar = new JButton("üßπ Limpiar");
        btnLimpiar.setFont(new Font("Segoe UI Emoji", Font.BOLD, 14));
        btnLimpiar.setBackground(new Color(120, 120, 120));
        btnLimpiar.setForeground(Color.WHITE);
        btnLimpiar.setFocusPainted(false);
        btnLimpiar.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        btnLimpiar.setPreferredSize(new Dimension(140, 35));
        btnLimpiar.addActionListener(e -> limpiarCampos());

        buttonsPanel.add(btnEnviar);
        buttonsPanel.add(btnLimpiar);

        gbc.gridy = 8;
        formPanel.add(buttonsPanel, gbc);

        mainPanel.add(formPanel, BorderLayout.WEST);

        // Panel derecho: tabla de historial
        JPanel panelTabla = new JPanel(new BorderLayout());
        panelTabla.setBackground(new Color(244, 246, 249));
        panelTabla.setBorder(BorderFactory.createTitledBorder("üóì Historial de Vacaciones"));

        model = new DefaultTableModel(new String[]{"ID", "Usuario", "Inicio", "Fin", "Motivo", "Solicitado"}, 0);
        tablaVacaciones = new JTable(model);
        JScrollPane scrollTabla = new JScrollPane(tablaVacaciones);
        panelTabla.add(scrollTabla, BorderLayout.CENTER);

        JButton btnEliminar = new JButton("üóë Eliminar");
        btnEliminar.setFont(new Font("Segoe UI Emoji", Font.BOLD, 14));
        btnEliminar.setBackground(new Color(200, 0, 0));
        btnEliminar.setForeground(Color.WHITE);
        btnEliminar.setFocusPainted(false);
        btnEliminar.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        btnEliminar.setPreferredSize(new Dimension(140, 35));
        btnEliminar.addActionListener(e -> eliminarVacacion());

        JPanel panelBotonEliminar = new JPanel();
        panelBotonEliminar.setBackground(new Color(244, 246, 249));
        panelBotonEliminar.add(btnEliminar);

        panelTabla.add(panelBotonEliminar, BorderLayout.SOUTH);

        mainPanel.add(panelTabla, BorderLayout.CENTER);

        cargarVacaciones();
    }

    private void enviarVacaciones() {
        String usuario = txtUsuario.getText().trim();
        String inicio = txtFechaInicio.getText().trim();
        String fin = txtFechaFin.getText().trim();
        String motivo = txtMotivo.getText().trim();

        if (usuario.isEmpty() || inicio.isEmpty() || fin.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor, completa todos los campos obligatorios.", "Campos vac√≠os", JOptionPane.WARNING_MESSAGE);
            return;
        }

        if (!inicio.matches("\\d{4}-\\d{2}-\\d{2}") || !fin.matches("\\d{4}-\\d{2}-\\d{2}")) {
            JOptionPane.showMessageDialog(this, "Formato de fecha incorrecto. Usa YYYY-MM-DD.", "Formato inv√°lido", JOptionPane.WARNING_MESSAGE);
            return;
        }

        try (Connection conn = conecctionSQL.getConnection();
             PreparedStatement ps = conn.prepareStatement("INSERT INTO vacaciones (usuario, fecha_inicio, fecha_fin, motivo) VALUES (?, ?, ?, ?)")) {
            ps.setString(1, usuario);
            ps.setString(2, inicio);
            ps.setString(3, fin);
            ps.setString(4, motivo);
            ps.executeUpdate();
            JOptionPane.showMessageDialog(this, "Vacaciones registradas correctamente.");
            limpiarCampos();
            cargarVacaciones();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error al registrar vacaciones:\n" + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void cargarVacaciones() {
        model.setRowCount(0);
        try (Connection conn = conecctionSQL.getConnection();
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery("SELECT * FROM vacaciones")) {
            while (rs.next()) {
                model.addRow(new Object[]{
                    rs.getInt("id"),
                    rs.getString("usuario"),
                    rs.getString("fecha_inicio"),
                    rs.getString("fecha_fin"),
                    rs.getString("motivo"),
                    rs.getTimestamp("fecha_solicitud")
                });
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error al cargar historial:\n" + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void eliminarVacacion() {
        int fila = tablaVacaciones.getSelectedRow();
        if (fila == -1) {
            JOptionPane.showMessageDialog(this, "Selecciona una fila para eliminar.", "Sin selecci√≥n", JOptionPane.WARNING_MESSAGE);
            return;
        }

        int confirm = JOptionPane.showConfirmDialog(this, "¬øEliminar esta solicitud de vacaciones?", "Confirmaci√≥n", JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) {
            int id = (int) model.getValueAt(fila, 0);
            try (Connection conn = conecctionSQL.getConnection();
                 PreparedStatement ps = conn.prepareStatement("DELETE FROM vacaciones WHERE id = ?")) {
                ps.setInt(1, id);
                ps.executeUpdate();
                cargarVacaciones();
                JOptionPane.showMessageDialog(this, "Solicitud eliminada.");
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "Error al eliminar:\n" + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    private void limpiarCampos() {
        txtFechaInicio.setText("");
        txtFechaFin.setText("");
        txtMotivo.setText("");
    }
}
