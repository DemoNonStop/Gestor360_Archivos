
package other_windows;

import java.awt.*;
import java.awt.event.*;
import java.sql.*;
import javax.swing.*;
import javax.swing.border.*;
import javax.swing.table.DefaultTableModel;

import database.conecctionSQL;
import main.main_window;
import main.MainPanelPlaceholder;

public class ProvidersPanel extends JPanel {

    private static final long serialVersionUID = 1L;
    private JPanel contentPane;
    private JTable table_providers;
    private DefaultTableModel model;
    private JTextField txt_Add_ID, txt_AddNameBS, txt_AddProduct, txt_AddNIF, txt_AddEmail, txt_AddPHNumber, txt_Search;
    private main_window mainWindow;

    public ProvidersPanel(main_window mainWindow) {
        this.mainWindow = mainWindow;

        setLayout(new BorderLayout());
        setBackground(new Color(245, 245, 255));

        contentPane = new JPanel(new BorderLayout(10, 10));
        contentPane.setBackground(new Color(245, 245, 255));
        contentPane.setBorder(new EmptyBorder(15, 15, 15, 15));
        add(contentPane, BorderLayout.CENTER);

        addHeader();
        addCenterPanel();
        loadProviders();
    }

    private void addHeader() {
        JPanel headerPanel = new JPanel(new BorderLayout());
        headerPanel.setBackground(new Color(0, 128, 255));

        JLabel lblTitle = new JLabel("üöö Gesti√≥n de Proveedores", SwingConstants.CENTER);
        lblTitle.setFont(new Font("Segoe UI Emoji", Font.BOLD, 24));
        lblTitle.setForeground(Color.WHITE);

        JButton btnBack = new JButton("‚Üê Volver");
        btnBack.setFocusPainted(false);
        btnBack.setBackground(new Color(0, 91, 150));
        btnBack.setForeground(Color.WHITE);
        btnBack.setFont(new Font("Segoe UI", Font.BOLD, 14));
        btnBack.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        btnBack.addActionListener(e -> mainWindow.setMainContent(new MainPanelPlaceholder()));

        headerPanel.add(lblTitle, BorderLayout.CENTER);
        headerPanel.add(btnBack, BorderLayout.WEST);
        contentPane.add(headerPanel, BorderLayout.NORTH);
    }

    private void addCenterPanel() {
        JPanel center = new JPanel(new BorderLayout(10, 10));
        center.setBackground(new Color(244, 246, 249));

        model = new DefaultTableModel(new String[]{"ID", "Empresa", "Producto", "NIF", "Tel√©fono", "Email"}, 0);
        table_providers = new JTable(model);
        JScrollPane scrollPane = new JScrollPane(table_providers);
        center.add(scrollPane, BorderLayout.CENTER);

        JPanel fieldsPanel = new JPanel(new GridBagLayout());
        fieldsPanel.setBackground(new Color(244, 246, 249));
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(5, 10, 5, 10);
        gbc.fill = GridBagConstraints.HORIZONTAL;

        String[] labels = {"ID:", "Empresa:", "Producto:", "NIF:", "Tel√©fono:", "Email:"};
        JTextField[] fields = {
            txt_Add_ID = new JTextField(),
            txt_AddNameBS = new JTextField(),
            txt_AddProduct = new JTextField(),
            txt_AddNIF = new JTextField(),
            txt_AddPHNumber = new JTextField(),
            txt_AddEmail = new JTextField()
        };

        for (int i = 0; i < labels.length; i++) {
            gbc.gridx = 0;
            gbc.gridy = i;
            gbc.weightx = 0.2;
            JLabel lbl = new JLabel(labels[i]);
            lbl.setFont(new Font("Segoe UI", Font.BOLD, 14));
            fieldsPanel.add(lbl, gbc);

            gbc.gridx = 1;
            gbc.weightx = 0.8;
            fields[i].setFont(new Font("Segoe UI", Font.PLAIN, 14));
            fields[i].setPreferredSize(new Dimension(200, 30));
            fieldsPanel.add(fields[i], gbc);
        }

        gbc.gridx = 0;
        gbc.gridy = labels.length;
        gbc.gridwidth = 2;
        gbc.anchor = GridBagConstraints.CENTER;

        JButton btnAdd = new JButton("‚ûï A√±adir Proveedor");
        btnAdd.setFont(new Font("Segoe UI Emoji", Font.BOLD, 14));
        btnAdd.setBackground(new Color(0, 128, 255));
        btnAdd.setForeground(Color.WHITE);
        btnAdd.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        btnAdd.setFocusPainted(false);
        btnAdd.setPreferredSize(new Dimension(180, 35));
        btnAdd.addActionListener(e -> addProvider());
        fieldsPanel.add(btnAdd, gbc);

        gbc.gridy++;
        JButton btnDelete = new JButton("üóë Eliminar");
        btnDelete.setFont(new Font("Segoe UI Emoji", Font.BOLD, 14));
        btnDelete.setBackground(new Color(200, 0, 0));
        btnDelete.setForeground(Color.WHITE);
        btnDelete.setFocusPainted(false);
        btnDelete.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        btnDelete.setPreferredSize(new Dimension(150, 35));
        btnDelete.addActionListener(e -> deleteProvider());
        fieldsPanel.add(btnDelete, gbc);

        gbc.gridy++;
        JLabel lblBuscar = new JLabel("Buscar por ID o empresa:");
        lblBuscar.setFont(new Font("Segoe UI Emoji", Font.BOLD, 14));
        fieldsPanel.add(lblBuscar, gbc);

        gbc.gridy++;
        txt_Search = new JTextField();
        txt_Search.setFont(new Font("Segoe UI", Font.PLAIN, 14));
        txt_Search.setPreferredSize(new Dimension(100, 30));
        fieldsPanel.add(txt_Search, gbc);

        gbc.gridy++;
        JButton btnBuscar = new JButton("üîç Buscar");
        btnBuscar.setFont(new Font("Segoe UI Emoji", Font.BOLD, 14));
        btnBuscar.setBackground(new Color(0, 91, 150));
        btnBuscar.setForeground(Color.WHITE);
        btnBuscar.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        btnBuscar.setFocusPainted(false);
        btnBuscar.setPreferredSize(new Dimension(150, 35));
        btnBuscar.addActionListener(e -> buscarProveedor());
        fieldsPanel.add(btnBuscar, gbc);

        gbc.gridy++;
        JButton btnModificar = new JButton("‚úè Modificar");
        btnModificar.setFont(new Font("Segoe UI Emoji", Font.BOLD, 14));
        btnModificar.setBackground(new Color(0, 128, 0));
        btnModificar.setForeground(Color.WHITE);
        btnModificar.setFocusPainted(false);
        btnModificar.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        btnModificar.setPreferredSize(new Dimension(150, 35));
        btnModificar.addActionListener(e -> modificarProveedor());
        fieldsPanel.add(btnModificar, gbc);

        gbc.gridy++;
        JButton btnIrClientes = new JButton("üë• Ir a Clientes");
        btnIrClientes.setFont(new Font("Segoe UI Emoji", Font.BOLD, 14));
        btnIrClientes.setBackground(new Color(0, 128, 255));
        btnIrClientes.setForeground(Color.WHITE);
        btnIrClientes.setFocusPainted(false);
        btnIrClientes.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        btnIrClientes.setPreferredSize(new Dimension(180, 35));
        btnIrClientes.addActionListener(e -> mainWindow.setMainContent(new ClientsPanel(mainWindow)));
        fieldsPanel.add(btnIrClientes, gbc);

        center.add(fieldsPanel, BorderLayout.EAST);
        contentPane.add(center, BorderLayout.CENTER);
    }

    private void loadProviders() {
        model.setRowCount(0);
        try (Connection conn = conecctionSQL.getConnection();
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery("SELECT * FROM proveedores")) {
            while (rs.next()) {
                model.addRow(new Object[]{
                    rs.getInt("id"),
                    rs.getString("nombre_empresa"),
                    rs.getString("producto"),
                    rs.getString("nif"),
                    rs.getInt("contacto_telefono"),
                    rs.getString("contacto_email")
                });
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private void addProvider() {
        try (Connection conn = conecctionSQL.getConnection();
             PreparedStatement ps = conn.prepareStatement("INSERT INTO proveedores (id, nombre_empresa, producto, nif, contacto_telefono, contacto_email) VALUES (?, ?, ?, ?, ?, ?)")) {

            int id = Integer.parseInt(txt_Add_ID.getText().trim());
            int telefono = Integer.parseInt(txt_AddPHNumber.getText().trim());

            ps.setInt(1, id);
            ps.setString(2, txt_AddNameBS.getText());
            ps.setString(3, txt_AddProduct.getText());
            ps.setString(4, txt_AddNIF.getText());
            ps.setInt(5, telefono);
            ps.setString(6, txt_AddEmail.getText());

            ps.executeUpdate();
            JOptionPane.showMessageDialog(this, "Proveedor agregado exitosamente");
            loadProviders();
            clearFields();

        } catch (SQLException e) {
            if (e.getMessage().contains("Duplicate entry")) {
                JOptionPane.showMessageDialog(this, "El ID ya existe. Usa un ID √∫nico.", "ID duplicado", JOptionPane.ERROR_MESSAGE);
            } else {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Error al agregar proveedor", "Error de base de datos", JOptionPane.ERROR_MESSAGE);
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Verifica los campos num√©ricos (ID, Tel√©fono)", "Error de formato", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void deleteProvider() {
        int selectedRow = table_providers.getSelectedRow();
        if (selectedRow != -1) {
            int confirm = JOptionPane.showConfirmDialog(this, "¬øDeseas eliminar el proveedor seleccionado?", "Confirmar eliminaci√≥n", JOptionPane.YES_NO_OPTION);
            if (confirm == JOptionPane.YES_OPTION) {
                int id = (int) model.getValueAt(selectedRow, 0);
                try (Connection conn = conecctionSQL.getConnection();
                     PreparedStatement ps = conn.prepareStatement("DELETE FROM proveedores WHERE id = ?")) {
                    ps.setInt(1, id);
                    ps.executeUpdate();
                    loadProviders();
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this, "Error al eliminar proveedor", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Selecciona una fila para eliminar", "Sin selecci√≥n", JOptionPane.WARNING_MESSAGE);
        }
    }

    private void buscarProveedor() {
        String filtro = txt_Search.getText().trim();
        model.setRowCount(0);

        String sql = "SELECT * FROM proveedores WHERE nombre_empresa LIKE ? OR id LIKE ?";
        try (Connection conn = conecctionSQL.getConnection();
             PreparedStatement ps = conn.prepareStatement(sql)) {

            ps.setString(1, "%" + filtro + "%");
            ps.setString(2, "%" + filtro + "%");
            ResultSet rs = ps.executeQuery();

            while (rs.next()) {
                model.addRow(new Object[]{
                    rs.getInt("id"),
                    rs.getString("nombre_empresa"),
                    rs.getString("producto"),
                    rs.getString("nif"),
                    rs.getInt("contacto_telefono"),
                    rs.getString("contacto_email")
                });
            }

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error al buscar proveedor", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void modificarProveedor() {
        try (Connection conn = conecctionSQL.getConnection();
             PreparedStatement ps = conn.prepareStatement("UPDATE proveedores SET nombre_empresa=?, producto=?, nif=?, contacto_telefono=?, contacto_email=? WHERE id=?")) {

            ps.setString(1, txt_AddNameBS.getText().trim());
            ps.setString(2, txt_AddProduct.getText().trim());
            ps.setString(3, txt_AddNIF.getText().trim());
            ps.setInt(4, Integer.parseInt(txt_AddPHNumber.getText().trim()));
            ps.setString(5, txt_AddEmail.getText().trim());
            ps.setInt(6, Integer.parseInt(txt_Add_ID.getText().trim()));

            int filas = ps.executeUpdate();
            if (filas > 0) {
                JOptionPane.showMessageDialog(this, "Proveedor modificado correctamente.");
                loadProviders();
                clearFields();
            } else {
                JOptionPane.showMessageDialog(this, "No se encontr√≥ el proveedor con ese ID.", "Atenci√≥n", JOptionPane.WARNING_MESSAGE);
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al modificar", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void clearFields() {
        txt_Add_ID.setText("");
        txt_AddNameBS.setText("");
        txt_AddProduct.setText("");
        txt_AddNIF.setText("");
        txt_AddEmail.setText("");
        txt_AddPHNumber.setText("");
        txt_Search.setText("");
    }
}
