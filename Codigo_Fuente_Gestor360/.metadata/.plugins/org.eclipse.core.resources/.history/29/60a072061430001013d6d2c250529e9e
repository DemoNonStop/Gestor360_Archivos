package other_windows;

import java.awt.*;
import java.awt.event.*;
import java.sql.*;
import javax.swing.*;
import javax.swing.border.*;
import javax.swing.table.DefaultTableModel;

import database.conecctionSQL;
import main.main_window;

public class StockPanel extends JPanel {

    private static final long serialVersionUID = 1L;
    private JPanel contentPane;
    private JTable table_stock;
    private DefaultTableModel model;
    private JTextField txt_ID_Delete, txt_Add_ID, txt_AddName, txt_AddCantidad, txt_AddPrecio, txt_AddDescripcion;
    private main_window mainWindow;

    public StockPanel(main_window mainWindow) {
        this.mainWindow = mainWindow;

        setLayout(new BorderLayout());
        setBackground(new Color(245, 245, 255));

        contentPane = new JPanel(new BorderLayout(10, 10));
        contentPane.setBackground(new Color(245, 245, 255));
        contentPane.setBorder(new EmptyBorder(15, 15, 15, 15));
        add(contentPane, BorderLayout.CENTER);

        addHeader();
        addCenterPanel();
        addSidebar();
        loadStock();
    }

    private void addHeader() {
        JPanel headerPanel = new JPanel(new BorderLayout());
        headerPanel.setBackground(new Color(0, 128, 255));

        JLabel lblTitle = new JLabel("üì¶ Gesti√≥n de Stock", SwingConstants.CENTER);
        lblTitle.setFont(new Font("Segoe UI Emoji", Font.BOLD, 22));
        lblTitle.setForeground(Color.WHITE);

        JButton btnBack = new JButton("‚Üê Volver");
        btnBack.setFont(new Font("Segoe UI", Font.BOLD, 14));
        btnBack.setBackground(new Color(108, 99, 255));
        btnBack.setForeground(Color.WHITE);
        btnBack.setFocusPainted(false);
        btnBack.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        //btnBack.addActionListener(e -> mainWindow.setMainContent(new main_panel_placeholder()));

        headerPanel.add(lblTitle, BorderLayout.CENTER);
        headerPanel.add(btnBack, BorderLayout.WEST);
        contentPane.add(headerPanel, BorderLayout.NORTH);
    }

    private void addCenterPanel() {
        JPanel center = new JPanel(new BorderLayout(10, 10));
        center.setBackground(new Color(244, 246, 249));

        model = new DefaultTableModel(new String[]{"ID", "Nombre", "Cantidad", "Precio", "Descripci√≥n"}, 0);
        table_stock = new JTable(model);
        JScrollPane scrollPane = new JScrollPane(table_stock);
        center.add(scrollPane, BorderLayout.CENTER);

        JPanel fieldsPanel = new JPanel(new GridBagLayout());
        fieldsPanel.setBackground(new Color(244, 246, 249));
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(5, 10, 5, 10);
        gbc.fill = GridBagConstraints.HORIZONTAL;

        String[] labels = {"ID:", "Nombre:", "Cantidad:", "Precio:", "Descripci√≥n:"};
        JTextField[] fields = {
            txt_Add_ID = new JTextField(),
            txt_AddName = new JTextField(),
            txt_AddCantidad = new JTextField(),
            txt_AddPrecio = new JTextField(),
            txt_AddDescripcion = new JTextField()
        };

        for (int i = 0; i < labels.length; i++) {
            gbc.gridx = 0;
            gbc.gridy = i;
            gbc.weightx = 0.2;
            JLabel lbl = new JLabel(labels[i]);
            lbl.setFont(new Font("Segoe UI", Font.BOLD, 14));
            fieldsPanel.add(lbl, gbc);

            gbc.gridx = 1;
            gbc.weightx = 0.8;
            fields[i].setFont(new Font("Segoe UI", Font.PLAIN, 14));
            fields[i].setPreferredSize(new Dimension(200, 30));
            fieldsPanel.add(fields[i], gbc);
        }

        JButton btnAdd = new JButton("‚ûï A√±adir Producto");
        btnAdd.setFont(new Font("Segoe UI Emoji", Font.BOLD, 14));
        btnAdd.setBackground(new Color(0, 128, 255));
        btnAdd.setForeground(Color.WHITE);
        btnAdd.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        btnAdd.setFocusPainted(false);
        btnAdd.setPreferredSize(new Dimension(180, 35));
        btnAdd.addActionListener(e -> addProduct());

        gbc.gridx = 0;
        gbc.gridy = labels.length;
        gbc.gridwidth = 2;
        gbc.anchor = GridBagConstraints.CENTER;
        fieldsPanel.add(btnAdd, gbc);

        JLabel lblEliminar = new JLabel("Eliminar producto por ID:");
        lblEliminar.setFont(new Font("Segoe UI Emoji", Font.BOLD, 14));
        gbc.gridy = labels.length + 1;
        fieldsPanel.add(lblEliminar, gbc);

        txt_ID_Delete = new JTextField();
        txt_ID_Delete.setFont(new Font("Segoe UI", Font.PLAIN, 14));
        txt_ID_Delete.setPreferredSize(new Dimension(100, 30));
        gbc.gridy = labels.length + 2;
        fieldsPanel.add(txt_ID_Delete, gbc);

        JButton btnDelete = new JButton("üóë Eliminar");
        btnDelete.setFont(new Font("Segoe UI Emoji", Font.BOLD, 14));
        btnDelete.setBackground(new Color(200, 0, 0));
        btnDelete.setForeground(Color.WHITE);
        btnDelete.setFocusPainted(false);
        btnDelete.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        btnDelete.setPreferredSize(new Dimension(150, 35));
        btnDelete.addActionListener(e -> deleteProduct());
        gbc.gridy = labels.length + 3;
        fieldsPanel.add(btnDelete, gbc);

        center.add(fieldsPanel, BorderLayout.EAST);
        contentPane.add(center, BorderLayout.CENTER);
    }

    private void addSidebar() {
        JPanel sidebar = new JPanel();
        sidebar.setPreferredSize(new Dimension(150, 0));
        sidebar.setBackground(new Color(245, 247, 250));
        sidebar.setBorder(new EmptyBorder(10, 10, 10, 10));
        contentPane.add(sidebar, BorderLayout.WEST);
    }

    private void loadStock() {
        model.setRowCount(0);
        try (Connection conn = conecctionSQL.getConnection();
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery("SELECT * FROM productos")) {

            while (rs.next()) {
                int id = rs.getInt("id");
                String nombre = rs.getString("nombre");
                int cantidad = rs.getInt("cantidad");
                double precio = rs.getDouble("precio");
                String descripcion = rs.getString("descripcion");
                model.addRow(new Object[]{id, nombre, cantidad, precio, descripcion});
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private void addProduct() {
        try (Connection conn = conecctionSQL.getConnection();
             PreparedStatement ps = conn.prepareStatement("INSERT INTO productos (id, nombre, cantidad, precio, descripcion) VALUES (?, ?, ?, ?, ?)")) {

            int id = Integer.parseInt(txt_Add_ID.getText().trim());
            int cantidad = Integer.parseInt(txt_AddCantidad.getText().trim());
            double precio = Double.parseDouble(txt_AddPrecio.getText().trim());
            String descripcion = txt_AddDescripcion.getText().trim();

            ps.setInt(1, id);
            ps.setString(2, txt_AddName.getText());
            ps.setInt(3, cantidad);
            ps.setDouble(4, precio);
            ps.setString(5, descripcion);

            ps.executeUpdate();
            JOptionPane.showMessageDialog(this, "Producto agregado exitosamente");
            loadStock();
            clearFields();

        } catch (SQLException e) {
            if (e.getMessage().contains("Duplicate entry")) {
                JOptionPane.showMessageDialog(this, "El ID ya existe. Usa un ID √∫nico.", "ID duplicado", JOptionPane.ERROR_MESSAGE);
            } else {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Error al agregar producto.", "Error de base de datos", JOptionPane.ERROR_MESSAGE);
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Verifica los campos num√©ricos (ID, Cantidad, Precio)", "Error de formato", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void deleteProduct() {
        try {
            int id = Integer.parseInt(txt_ID_Delete.getText().trim());

            try (Connection conn = conecctionSQL.getConnection();
                 PreparedStatement ps = conn.prepareStatement("DELETE FROM productos WHERE id = ?")) {

                ps.setInt(1, id);
                int rows = ps.executeUpdate();

                if (rows > 0) {
                    JOptionPane.showMessageDialog(this, "Producto eliminado exitosamente");
                    loadStock();
                } else {
                    JOptionPane.showMessageDialog(this, "El ID no existe o ya fue eliminado", "Error", JOptionPane.WARNING_MESSAGE);
                }

            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Introduce un ID v√°lido", "Error de formato", JOptionPane.ERROR_MESSAGE);
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al eliminar producto", "Error de base de datos", JOptionPane.ERROR_MESSAGE);
        }

        clearFields();
    }

    private void clearFields() {
        txt_Add_ID.setText("");
        txt_AddName.setText("");
        txt_AddCantidad.setText("");
        txt_AddPrecio.setText("");
        txt_AddDescripcion.setText("");
        txt_ID_Delete.setText("");
    }
}
