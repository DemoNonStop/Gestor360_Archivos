
package other_windows;

import java.awt.*;
import java.awt.event.*;
import java.sql.*;
import javax.swing.*;
import javax.swing.border.*;
import javax.swing.table.DefaultTableModel;

import database.conecctionSQL;
import main.MainPanelPlaceholder;
import main.main_window;

public class ClientsPanel extends JPanel {

    private static final long serialVersionUID = 1L;
    private JPanel contentPane;
    private JTable table_clients;
    private DefaultTableModel model;
    private JTextField txt_Add_ID, txt_AddName, txt_AddNIF, txt_AddPHNumber, txt_AddEmail, txt_ID_Delete, txt_Search;
    private main_window mainWindow;

    public ClientsPanel(main_window mainWindow) {
        this.mainWindow = mainWindow;

        setLayout(new BorderLayout());
        setBackground(new Color(245, 245, 255));

        contentPane = new JPanel(new BorderLayout(10, 10));
        contentPane.setBackground(new Color(245, 245, 255));
        contentPane.setBorder(new EmptyBorder(15, 15, 15, 15));
        add(contentPane, BorderLayout.CENTER);

        addHeader();
        addCenterPanel();
        loadClients();
    }

    private void addHeader() {
        JPanel headerPanel = new JPanel(new BorderLayout());
        headerPanel.setBackground(new Color(0, 128, 255));

        JLabel lblTitle = new JLabel("üë• Gesti√≥n de Clientes", SwingConstants.CENTER);
        lblTitle.setFont(new Font("Segoe UI Emoji", Font.BOLD, 24));
        lblTitle.setForeground(Color.WHITE);

        JButton btnBack = new JButton("‚Üê Volver");
        btnBack.setFocusPainted(false);
        btnBack.setBackground(new Color(0, 91, 150));
        btnBack.setForeground(Color.WHITE);
        btnBack.setFont(new Font("Segoe UI", Font.BOLD, 14));
        btnBack.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        btnBack.addActionListener(e -> {
            mainWindow.setMainContent(new MainPanelPlaceholder());
        });

        headerPanel.add(lblTitle, BorderLayout.CENTER);
        headerPanel.add(btnBack, BorderLayout.WEST);
        contentPane.add(headerPanel, BorderLayout.NORTH);
    }

    private void addCenterPanel() {
        JPanel center = new JPanel(new BorderLayout(10, 10));
        center.setBackground(new Color(244, 246, 249));

        model = new DefaultTableModel(new String[]{"ID", "Nombre", "DNI", "Tel√©fono", "Email"}, 0);
        table_clients = new JTable(model);
        JScrollPane scrollPane = new JScrollPane(table_clients);
        center.add(scrollPane, BorderLayout.CENTER);

        JPanel fieldsPanel = new JPanel(new GridBagLayout());
        fieldsPanel.setBackground(new Color(244, 246, 249));
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(5, 10, 5, 10);
        gbc.fill = GridBagConstraints.HORIZONTAL;

        String[] labels = {"ID:", "Nombre:", "DNI:", "Tel√©fono:", "Email:"};
        JTextField[] fields = {
            txt_Add_ID = new JTextField(),
            txt_AddName = new JTextField(),
            txt_AddNIF = new JTextField(),
            txt_AddPHNumber = new JTextField(),
            txt_AddEmail = new JTextField()
        };

        for (int i = 0; i < labels.length; i++) {
            gbc.gridx = 0;
            gbc.gridy = i;
            gbc.weightx = 0.2;
            JLabel lbl = new JLabel(labels[i]);
            lbl.setFont(new Font("Segoe UI", Font.BOLD, 14));
            fieldsPanel.add(lbl, gbc);

            gbc.gridx = 1;
            gbc.weightx = 0.8;
            fields[i].setFont(new Font("Segoe UI", Font.PLAIN, 14));
            fields[i].setPreferredSize(new Dimension(200, 30));
            fieldsPanel.add(fields[i], gbc);
        }

        gbc.gridx = 0;
        gbc.gridy = labels.length;
        gbc.gridwidth = 2;
        gbc.anchor = GridBagConstraints.CENTER;

        JButton btnAdd = new JButton("‚ûï A√±adir Cliente");
        btnAdd.setFont(new Font("Segoe UI Emoji", Font.BOLD, 14));
        btnAdd.setBackground(new Color(0, 128, 255));
        btnAdd.setForeground(Color.WHITE);
        btnAdd.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        btnAdd.setFocusPainted(false);
        btnAdd.setPreferredSize(new Dimension(180, 35));
        btnAdd.addActionListener(e -> addClient());
        fieldsPanel.add(btnAdd, gbc);

        JButton btnDelete = new JButton("üóë Eliminar");
        btnDelete.setFont(new Font("Segoe UI Emoji", Font.BOLD, 14));
        btnDelete.setBackground(new Color(200, 0, 0));
        btnDelete.setForeground(Color.WHITE);
        btnDelete.setFocusPainted(false);
        btnDelete.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        btnDelete.setPreferredSize(new Dimension(150, 35));
        btnDelete.addActionListener(e -> deleteClient());

        gbc.gridy++;
        fieldsPanel.add(btnDelete, gbc);

        JLabel lblBuscar = new JLabel("Buscar por nombre:");
        lblBuscar.setFont(new Font("Segoe UI Emoji", Font.BOLD, 14));
        gbc.gridy++;
        fieldsPanel.add(lblBuscar, gbc);

        txt_Search = new JTextField();
        txt_Search.setFont(new Font("Segoe UI", Font.PLAIN, 14));
        txt_Search.setPreferredSize(new Dimension(100, 30));
        gbc.gridy++;
        fieldsPanel.add(txt_Search, gbc);

        JButton btnBuscar = new JButton("üîç Buscar");
        btnBuscar.setFont(new Font("Segoe UI Emoji", Font.BOLD, 14));
        btnBuscar.setBackground(new Color(0, 91, 150));
        btnBuscar.setForeground(Color.WHITE);
        btnBuscar.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        btnBuscar.setFocusPainted(false);
        btnBuscar.setPreferredSize(new Dimension(150, 35));
        btnBuscar.addActionListener(e -> buscarCliente());
        gbc.gridy++;
        fieldsPanel.add(btnBuscar, gbc);

        JButton btnModificar = new JButton("‚úè Modificar");
        btnModificar.setFont(new Font("Segoe UI Emoji", Font.BOLD, 14));
        btnModificar.setBackground(new Color(0, 128, 0));
        btnModificar.setForeground(Color.WHITE);
        btnModificar.setFocusPainted(false);
        btnModificar.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        btnModificar.setPreferredSize(new Dimension(150, 35));
        btnModificar.addActionListener(e -> modificarCliente());
        gbc.gridy++;
        fieldsPanel.add(btnModificar, gbc);

        center.add(fieldsPanel, BorderLayout.EAST);
        contentPane.add(center, BorderLayout.CENTER);
    }

    private void loadClients() {
        model.setRowCount(0);
        try (Connection conn = conecctionSQL.getConnection();
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery("SELECT * FROM clientes")) {

            while (rs.next()) {
                model.addRow(new Object[]{
                    rs.getInt("id"),
                    rs.getString("nombre"),
                    rs.getString("dni"),
                    rs.getString("telefono"),
                    rs.getString("email")
                });
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private void addClient() {
        try (Connection conn = conecctionSQL.getConnection();
             PreparedStatement ps = conn.prepareStatement("INSERT INTO clientes (id, nombre, dni, telefono, email) VALUES (?, ?, ?, ?, ?)")) {

            ps.setInt(1, Integer.parseInt(txt_Add_ID.getText().trim()));
            ps.setString(2, txt_AddName.getText().trim());
            ps.setString(3, txt_AddNIF.getText().trim());
            ps.setString(4, txt_AddPHNumber.getText().trim());
            ps.setString(5, txt_AddEmail.getText().trim());

            ps.executeUpdate();
            JOptionPane.showMessageDialog(this, "Cliente agregado exitosamente");
            loadClients();
            clearFields();

        } catch (SQLException | NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Error al agregar cliente", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void deleteClient() {
        try (Connection conn = conecctionSQL.getConnection();
             PreparedStatement ps = conn.prepareStatement("DELETE FROM clientes WHERE id = ?")) {

            ps.setInt(1, Integer.parseInt(txt_Add_ID.getText().trim()));
            int rows = ps.executeUpdate();

            if (rows > 0) {
                JOptionPane.showMessageDialog(this, "Cliente eliminado exitosamente");
                loadClients();
            } else {
                JOptionPane.showMessageDialog(this, "No se pudo eliminar el cliente", "Error", JOptionPane.WARNING_MESSAGE);
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al eliminar", "Error", JOptionPane.ERROR_MESSAGE);
        }
        clearFields();
    }

    private void buscarCliente() {
        String filtro = txt_Search.getText().trim();
        model.setRowCount(0);

        String sql = "SELECT * FROM clientes WHERE nombre LIKE ?";
        try (Connection conn = conecctionSQL.getConnection();
             PreparedStatement ps = conn.prepareStatement(sql)) {

            ps.setString(1, "%" + filtro + "%");
            ResultSet rs = ps.executeQuery();

            while (rs.next()) {
                model.addRow(new Object[]{
                    rs.getInt("id"),
                    rs.getString("nombre"),
                    rs.getString("dni"),
                    rs.getString("telefono"),
                    rs.getString("email")
                });
            }

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error al buscar cliente", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void modificarCliente() {
        try (Connection conn = conecctionSQL.getConnection();
             PreparedStatement ps = conn.prepareStatement("UPDATE clientes SET nombre=?, dni=?, telefono=?, email=? WHERE id=?")) {

            int id = Integer.parseInt(txt_Add_ID.getText().trim());
            String nombre = txt_AddName.getText().trim();
            String dni = txt_AddNIF.getText().trim();
            String telefono = txt_AddPHNumber.getText().trim();
            String email = txt_AddEmail.getText().trim();

            ps.setString(1, nombre);
            ps.setString(2, dni);
            ps.setString(3, telefono);
            ps.setString(4, email);
            ps.setInt(5, id);

            int filas = ps.executeUpdate();
            if (filas > 0) {
                JOptionPane.showMessageDialog(this, "Cliente modificado correctamente.");
                loadClients();
            } else {
                JOptionPane.showMessageDialog(this, "No se encontr√≥ el cliente con ese ID.", "Atenci√≥n", JOptionPane.WARNING_MESSAGE);
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al modificar", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void clearFields() {
        txt_Add_ID.setText("");
        txt_AddName.setText("");
        txt_AddNIF.setText("");
        txt_AddPHNumber.setText("");
        txt_AddEmail.setText("");
        txt_ID_Delete.setText("");
        txt_Search.setText("");
    }
}
