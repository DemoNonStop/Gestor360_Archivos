package other_windows;

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.border.EmptyBorder;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

import main.login_window;

public class Settings extends JFrame {

    private static final long serialVersionUID = 1L;
    private JPanel contentPane;
    private JPasswordField txt_AntPasswd, txt_NewPasswd, txt_RepNewPasswd;

    public Settings() {
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        setBounds(100, 100, 500, 650);
        setLocationRelativeTo(null);
        setTitle("Configuraci√≥n");

        contentPane = new JPanel();
        contentPane.setBackground(new Color(244, 246, 249));
        contentPane.setBorder(new EmptyBorder(25, 25, 25, 25));
        setContentPane(contentPane);
        contentPane.setLayout(new GridBagLayout());

        GridBagConstraints gbc = new GridBagConstraints();
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.anchor = GridBagConstraints.CENTER;
        gbc.weightx = 0;

        // T√≠tulo
        JLabel title = new JLabel("‚öô Configuraci√≥n");
        title.setForeground(new Color(0, 91, 150));
        title.setFont(new Font("Segoe UI Emoji", Font.BOLD, 28));
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.gridwidth = 2;
        gbc.insets = new Insets(0, 0, 30, 0);
        contentPane.add(title, gbc);

        // Subt√≠tulo
        JLabel lblPassTitle = new JLabel("Cambiar contrase√±a");
        lblPassTitle.setForeground(new Color(90, 90, 90));
        lblPassTitle.setFont(new Font("Segoe UI", Font.BOLD, 18));
        gbc.gridy = 1;
        gbc.insets = new Insets(0, 0, 20, 0);
        contentPane.add(lblPassTitle, gbc);

        // Campos
        txt_AntPasswd = createPasswordField("Contrase√±a actual", gbc, 2);
        txt_NewPasswd = createPasswordField("Nueva contrase√±a", gbc, 4);
     // Campo con validaci√≥n visual a la derecha
        JLabel lbl = new JLabel("Repetir contrase√±a");
        lbl.setForeground(new Color(90, 90, 90));
        lbl.setFont(new Font("Segoe UI", Font.PLAIN, 14));
        gbc.gridy = 6;
        gbc.insets = new Insets(5, 0, 5, 0);
        gbc.anchor = GridBagConstraints.WEST;
        contentPane.add(lbl, gbc);

        txt_RepNewPasswd = new JPasswordField();
        txt_RepNewPasswd.setFont(new Font("Segoe UI", Font.PLAIN, 16));
        txt_RepNewPasswd.setPreferredSize(new Dimension(250, 35));

        JLabel iconoValidacion = new JLabel(" "); // Aqu√≠ va el icono
        iconoValidacion.setFont(new Font("Segoe UI Emoji", Font.PLAIN, 20));
        iconoValidacion.setPreferredSize(new Dimension(30, 35));

        JPanel panelValidado = new JPanel(new FlowLayout(FlowLayout.LEFT, 0, 0));
        panelValidado.setOpaque(false);
        panelValidado.add(txt_RepNewPasswd);
        panelValidado.add(Box.createRigidArea(new Dimension(10, 0))); // espacio
        panelValidado.add(iconoValidacion);

        gbc.gridy = 7;
        gbc.insets = new Insets(0, 0, 15, 0);
        gbc.anchor = GridBagConstraints.CENTER;
        contentPane.add(panelValidado, gbc);

        // Verificaci√≥n en tiempo real
        txt_RepNewPasswd.getDocument().addDocumentListener(new javax.swing.event.DocumentListener() {
            private void verificar() {
                String nueva = new String(txt_NewPasswd.getPassword());
                String repetida = new String(txt_RepNewPasswd.getPassword());

                if (repetida.isEmpty()) {
                    iconoValidacion.setText(" ");
                } else if (nueva.equals(repetida)) {
                    iconoValidacion.setText("‚úÖ");
                } else {
                    iconoValidacion.setText("‚ùå");
                }
            }

            public void insertUpdate(javax.swing.event.DocumentEvent e) { verificar(); }
            public void removeUpdate(javax.swing.event.DocumentEvent e) { verificar(); }
            public void changedUpdate(javax.swing.event.DocumentEvent e) { verificar(); }
        });


        txt_RepNewPasswd.getDocument().addDocumentListener(new DocumentListener() {
            private void verificar() {
                String nueva = new String(txt_NewPasswd.getPassword());
                String repetida = new String(txt_RepNewPasswd.getPassword());

                if (repetida.isEmpty()) {
                    lblValidacion.setText(" ");
                } else if (nueva.equals(repetida)) {
                    lblValidacion.setText("‚úÖ Las contrase√±as coinciden");
                    lblValidacion.setForeground(new Color(0, 128, 0));
                } else {
                    lblValidacion.setText("‚ùå Las contrase√±as no coinciden");
                    lblValidacion.setForeground(Color.RED);
                }
            }

            public void insertUpdate(DocumentEvent e) { verificar(); }
            public void removeUpdate(DocumentEvent e) { verificar(); }
            public void changedUpdate(DocumentEvent e) { verificar(); }
        });

        // Bot√≥n aplicar
        JButton btnAplicar = createButton("Aplicar", gbc, 8);
        btnAplicar.addActionListener(e -> aplicarConfiguracion());
        getRootPane().setDefaultButton(btnAplicar); // Pulsar Enter activa aplicar

        // Bot√≥n cancelar
        JButton btnCancelar = createButton("Cancelar", gbc, 9);
        btnCancelar.addActionListener(e -> {
            new main.main_window().setVisible(true);
            dispose();
        });

        // Bot√≥n cerrar sesi√≥n con emoji
        JButton btnCerrarSesion = createButton("üîì Cerrar sesi√≥n", gbc, 10);
        btnCerrarSesion.addActionListener(e -> {
            for (Window window : Window.getWindows()) {
                window.dispose();
            }
            new login_window().setVisible(true);
        });
    }

    private JPasswordField createPasswordField(String placeholder, GridBagConstraints gbc, int gridy) {
        JLabel lbl = new JLabel(placeholder);
        lbl.setForeground(new Color(90, 90, 90));
        lbl.setFont(new Font("Segoe UI", Font.PLAIN, 14));
        gbc.gridy = gridy;
        gbc.insets = new Insets(5, 0, 5, 0);
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        contentPane.add(lbl, gbc);

        JPasswordField field = new JPasswordField();
        field.setFont(new Font("Segoe UI", Font.PLAIN, 16));
        field.setPreferredSize(new Dimension(300, 35));

        JPanel panel = new JPanel(new FlowLayout(FlowLayout.CENTER, 0, 0));
        panel.setOpaque(false);
        panel.add(field);

        gbc.gridy = gridy + 1;
        gbc.insets = new Insets(0, 0, 15, 0);
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.anchor = GridBagConstraints.CENTER;
        contentPane.add(panel, gbc);

        return field;
    }

    private JButton createButton(String text, GridBagConstraints gbc, int gridy) {
        JButton btn = new JButton(text);
        btn.setBackground(new Color(108, 99, 255));
        btn.setForeground(Color.WHITE);
        btn.setFont(new Font("Segoe UI", Font.BOLD, 14));
        btn.setFocusPainted(false);
        btn.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        btn.setPreferredSize(new Dimension(150, 35));
        btn.setBorder(new RoundedBorder(15)); // Bordes redondeados

        btn.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseEntered(MouseEvent e) {
                btn.setBackground(new Color(120, 110, 255));
            }

            @Override
            public void mouseExited(MouseEvent e) {
                btn.setBackground(new Color(108, 99, 255));
            }
        });

        JPanel panel = new JPanel(new FlowLayout(FlowLayout.CENTER, 0, 0));
        panel.setOpaque(false);
        panel.add(btn);

        gbc.gridy = gridy;
        gbc.insets = new Insets(20, 0, 15, 0);
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.anchor = GridBagConstraints.CENTER;
        contentPane.add(panel, gbc);

        return btn;
    }

    private void aplicarConfiguracion() {
        String antigua = String.valueOf(txt_AntPasswd.getPassword());
        String nueva = String.valueOf(txt_NewPasswd.getPassword());
        String repetida = String.valueOf(txt_RepNewPasswd.getPassword());

        if (antigua.isEmpty() || nueva.isEmpty() || repetida.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Todos los campos de contrase√±a son obligatorios", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (!nueva.equals(repetida)) {
            JOptionPane.showMessageDialog(this, "Las contrase√±as nuevas no coinciden", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (nueva.length() < 8) {
            JOptionPane.showMessageDialog(this, "La contrase√±a debe tener m√≠nimo 8 caracteres", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (!antigua.equals(login_window.storedPassword)) {
            JOptionPane.showMessageDialog(this, "La contrase√±a actual no es correcta", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        login_window.updatePassword(nueva);

        JDialog dialog = new JDialog(this, "√âxito", false);
        dialog.setLayout(new BorderLayout());

        JLabel lbl = new JLabel("üîí Contrase√±a actualizada con √©xito. Cerrando sesi√≥n...", SwingConstants.CENTER);
        lbl.setFont(new Font("Segoe UI Emoji", Font.PLAIN, 16));
        lbl.setBorder(new EmptyBorder(20, 20, 20, 20));
        dialog.add(lbl, BorderLayout.CENTER);

        dialog.setSize(420, 120);
        dialog.setLocationRelativeTo(this);
        dialog.setUndecorated(true);
        dialog.setVisible(true);

        Timer timer = new Timer(1500, e -> {
            dialog.dispose();
            for (Window window : Window.getWindows()) {
                window.dispose();
            }
            new login_window().setVisible(true);
        });
        timer.setRepeats(false);
        timer.start();
    }

    // Clase interna para bordes redondeados
    private static class RoundedBorder extends javax.swing.border.AbstractBorder {
        private final int radius;

        public RoundedBorder(int radius) {
            this.radius = radius;
        }

        @Override
        public void paintBorder(Component c, Graphics g, int x, int y, int width, int height) {
            Graphics2D g2 = (Graphics2D) g;
            g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
            g2.setColor(new Color(150, 150, 150));
            g2.drawRoundRect(x, y, width - 1, height - 1, radius, radius);
        }
    }
}
