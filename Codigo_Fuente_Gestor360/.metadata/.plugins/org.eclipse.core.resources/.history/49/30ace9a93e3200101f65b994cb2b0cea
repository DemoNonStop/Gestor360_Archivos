
package other_windows;

import javax.swing.*;
import javax.swing.border.EmptyBorder;
import javax.swing.table.DefaultTableModel;
import database.conecctionSQL;

import java.awt.*;
import java.awt.event.*;
import java.sql.*;

public class ClientsPanel extends JPanel {

    private JTable table;
    private DefaultTableModel model;
    private JTextField txt_Search, txt_ID, txt_Name, txt_NIF, txt_Phone, txt_Email;

    public ClientsPanel() {
        setLayout(new BorderLayout(10, 10));
        setBackground(Color.WHITE);
        setBorder(new EmptyBorder(10, 10, 10, 10));

        JPanel topPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        topPanel.setBackground(Color.WHITE);

        txt_Search = new JTextField(20);
        JButton btnSearch = new JButton("üîç Buscar");
        btnSearch.addActionListener(e -> searchClient());

        topPanel.add(new JLabel("Buscar por nombre:"));
        topPanel.add(txt_Search);
        topPanel.add(btnSearch);

        add(topPanel, BorderLayout.NORTH);

        model = new DefaultTableModel();
        model.setColumnIdentifiers(new Object[]{"ID", "Nombre", "NIF", "Tel√©fono", "Email"});
        table = new JTable(model);
        table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        JScrollPane scrollPane = new JScrollPane(table);
        add(scrollPane, BorderLayout.CENTER);

        JPanel formPanel = new JPanel(new GridLayout(6, 2, 10, 10));
        formPanel.setBorder(new EmptyBorder(10, 0, 10, 0));
        formPanel.setBackground(Color.WHITE);

        txt_ID = new JTextField();
        txt_Name = new JTextField();
        txt_NIF = new JTextField();
        txt_Phone = new JTextField();
        txt_Email = new JTextField();

        formPanel.add(new JLabel("ID:"));
        formPanel.add(txt_ID);
        formPanel.add(new JLabel("Nombre:"));
        formPanel.add(txt_Name);
        formPanel.add(new JLabel("NIF:"));
        formPanel.add(txt_NIF);
        formPanel.add(new JLabel("Tel√©fono:"));
        formPanel.add(txt_Phone);
        formPanel.add(new JLabel("Email:"));
        formPanel.add(txt_Email);

        JButton btnModificar = new JButton("‚úè Modificar");
        btnModificar.addActionListener(e -> modificarCliente());

        formPanel.add(btnModificar);
        add(formPanel, BorderLayout.SOUTH);

        cargarClientes();
    }

    private void cargarClientes() {
        model.setRowCount(0);
        try (Connection conn = conecctionSQL.getConnection();
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery("SELECT * FROM clientes")) {

            while (rs.next()) {
                model.addRow(new Object[]{
                    rs.getInt("id"),
                    rs.getString("nombre"),
                    rs.getString("nif"),
                    rs.getString("telefono"),
                    rs.getString("email")
                });
            }

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error al cargar clientes", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void searchClient() {
        String nombre = txt_Search.getText().trim();
        model.setRowCount(0);
        if (nombre.isEmpty()) {
            cargarClientes();
            return;
        }

        try (Connection conn = conecctionSQL.getConnection();
             PreparedStatement ps = conn.prepareStatement("SELECT * FROM clientes WHERE nombre LIKE ?")) {

            ps.setString(1, "%" + nombre + "%");
            ResultSet rs = ps.executeQuery();

            while (rs.next()) {
                model.addRow(new Object[]{
                    rs.getInt("id"),
                    rs.getString("nombre"),
                    rs.getString("nif"),
                    rs.getString("telefono"),
                    rs.getString("email")
                });
            }

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error en la b√∫squeda", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void modificarCliente() {
        try {
            int id = Integer.parseInt(txt_ID.getText().trim());
            String nombre = txt_Name.getText().trim();
            String nif = txt_NIF.getText().trim();
            String telefono = txt_Phone.getText().trim();
            String email = txt_Email.getText().trim();

            try (Connection conn = conecctionSQL.getConnection();
                 PreparedStatement ps = conn.prepareStatement(
                     "UPDATE clientes SET nombre=?, nif=?, telefono=?, email=? WHERE id=?")) {

                ps.setString(1, nombre);
                ps.setString(2, nif);
                ps.setString(3, telefono);
                ps.setString(4, email);
                ps.setInt(5, id);

                int filas = ps.executeUpdate();
                if (filas > 0) {
                    JOptionPane.showMessageDialog(this, "Cliente actualizado correctamente");
                    cargarClientes();
                } else {
                    JOptionPane.showMessageDialog(this, "No se encontr√≥ el cliente con ese ID");
                }
            }

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "ID inv√°lido", "Error", JOptionPane.ERROR_MESSAGE);
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error al actualizar", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
}
